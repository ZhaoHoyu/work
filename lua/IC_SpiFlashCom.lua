--/******************** JC ***********************************************
--* File Name          : IC_SpiFlashCom.lua
--* Author             : yinsjun
--* Version            : V1.0.0
--* Date               : 2021-10-14
--* Description        : SPI falsh ,B12 Flash IC:
--*********************************************************************/
local socket = require("socket")
--local gammaData = {}
local gammaData = {
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x50,0x11,0x17,0xA1,0x11,0x1E,0x21,0x12,0x26,0xA1,0x12,0x35,0x61,0x13,0xFF,0x00,0xB0,0x22,0x2F,0x42,0x23,0x3D,0x52,0x24,0x4C,0x42,0x25,0x6B,0xD2,0x26,0xFF,0x00,0xD0,0x23,0x40,0x72,0x24,0x4D,0x82,0x25,0x5E,0xC2,0x26,0x7D,0x82,0x28,0xFF,0x00,0xD0,0x23,0x40,0xC2,0x24,0x55,0x62,0x26,0x74,0x82,0x28,0xA8,0x12,0x2C,0xFF,0x00,0xF0,0x23,0x49,0xB2,0x25,0x65,0xA2,0x27,0x90,0xE2,0x2A,0xE4,0x92,0x30,0xFF,0x00,0xC0,0x24,0x4F,0xF2,0x25,0x6A,0x52,0x28,0xA0,0x12,0x2D,0x04,0x93,0x33,0xFF,0x00,0xD0,0x24,0x53,0x92,0x26,0x7A,0xA2,0x29,0xBB,0x82,0x2F,0x3A,0xD3,0x36,0xFF,0x00,0x50,0x25,0x55,0x02,0x27,0x8F,0xB2,0x2A,0xE1,0x82,0x31,0x5F,0x13,0x39,0xFF,0x00,0x50,0x25,0x57,0xB2,0x27,0x9B,0x72,0x2C,0xFD,0x02,0x34,0x8A,0x33,0x3C,0xFF,0x00,0xA0,0x25,0x59,0x32,0x28,0xAA,0xB2,0x2D,0x1D,0xF3,0x35,0xAA,0x83,0x3E,0xFF,0x00,0x00,0x26,0x60,0x72,0x29,0xCE,0xE2,0x30,0x59,0x03,0x3A,0xF1,0xB3,0x43,0xFF,0x00,0xC0,0x26,0x6C,0xF2,0x2B,0x0E,0x63,0x36,0xC5,0x83,0x41,0x74,0xA4,0x4C,0xFF,0x00,0xF0,0x27,0x7D,0x52,0x2E,0x49,0x43,0x3B,0x18,0x04,0x48,0xE8,0x54,0x54,0xFF,0x00,0x00,0x29,0x8D,0xD2,0x31,0x8C,0x93,0x3F,0x68,0xC4,0x4D,0x4C,0x05,0x5B,0xFF,0x00,0x10,0x2A,0xA0,0x42,0x34,0xC8,0xC3,0x43,0xB5,0x04,0x53,0xA8,0x35,0x61,0xFF,0x00,0x80,0x2B,0xBB,0x12,0x37,0xF9,0x53,0x47,0xF8,0xC4,0x57,0xFC,0xE5,0x66,0xFF,0x00,0x80,0x2E,0xE8,0x42,0x3C,0x64,0xE4,0x4E,0x78,0x95,0x60,0x95,0x66,0x71,0xFF,0x00,0x80,0x32,0x2A,0x03,0x42,0xCA,0x04,0x56,0xF4,0x35,0x68,0x1F,0xB7,0x7A,0xFF,0x00,0xC0,0x35,0x5F,0x83,0x46,0x1C,0xA5,0x5B,0x5A,0x76,0x6F,0x9B,0xA7,0x83,0xFF,0x00,0xA0,0x38,0x8B,0x83,0x4A,0x68,0x05,0x61,0xB8,0xE6,0x75,0x14,0xB8,0x8B,0xFF,0x00,0x50,0x3B,0xB4,0x73,0x4E,0xA9,0xF5,0x65,0x11,0x67,0x7C,0x85,0xD8,0x93,0xFF,0x00,0xC0,0x3D,0xDC,0xD3,0x51,0xED,0x85,0x6A,0x65,0x47,0x82,0xF4,0xE8,0x9B,0xFF,0x00,0x80,0x40,0x07,0x04,0x55,0x2C,0x06,0x6F,0xB8,0x07,0x88,0x61,0x79,0xA3,0xFF,0x00,0x80,0x41,0x18,0xC4,0x56,0x48,0x36,0x71,0xE0,0xE7,0x8A,0x97,0x49,0xA7,0xFF,0x00,0xC0,0x42,0x2D,0x54,0x58,0x65,0x46,0x73,0x05,0xD8,0x8D,0xCB,0xF9,0xAA,0xFF,0x00,0xF0,0x43,0x3E,0xD4,0x59,0x82,0x26,0x75,0x29,0x88,0x90,0xFF,0xC9,0xAE,0xFF,0x00,0xE0,0x44,0x4E,0x34,0x5B,0xA0,0x06,0x77,0x4E,0x48,0x93,0x32,0x7A,0xB2,0xFF,0x00,0x00,0x46,0x60,0xC4,0x5C,0xBA,0x46,0x79,0x74,0x08,0x96,0x64,0x6A,0xB6,0xFF,0x00,0x00,0x47,0x70,0x44,0x5E,0xD6,0x46,0x7B,0x99,0xB8,0x98,0x98,0x2A,0xBA,0xFF,0x00,0x30,0x48,0x81,0x84,0x5F,0xF0,0x46,0x7D,0xBD,0x68,0x9B,0xCD,0x1A,0xBE,0xFF,0x00,0x40,0x49,0x95,0xE4,0x60,0x0C,0x07,0x7F,0xE0,0x18,0x9E,0x00,0xAB,0xC1,0xFF,0x00,0x30,0x4A,0xA3,0x74,0x62,0x24,0xF7,0x80,0x06,0xE9,0xA0,0x39,0x8B,0xC5,0xFF,0x00,0x30,0x4B,0xB3,0xB4,0x63,0x3C,0x27,0x83,0x2C,0xB9,0xA3,0x6C,0x1B,0xC9,0xFF,0x00,0x30,0x4B,0xB3,0xB4,0x63,0x3C,0x27,0x83,0x2C,0xB9,0xA3,0x6C,0x1B,0xC9,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
0x00,0x50,0x11,0x17,0xA1,0x11,0x1E,0x21,0x12,0x26,0xA1,0x12,0x35,0x61,0x13,0xFF,0x00,0xB0,0x22,0x2F,0x42,0x23,0x3D,0x52,0x24,0x4C,0x42,0x25,0x6B,0xD2,0x26,0xFF,0x00,0xD0,0x23,0x40,0x72,0x24,0x4D,0x82,0x25,0x5E,0xC2,0x26,0x7D,0x82,0x28,0xFF,0x00,0xD0,0x23,0x40,0xC2,0x24,0x55,0x62,0x26,0x74,0x82,0x28,0xA8,0x12,0x2C,0xFF,0x00,0xF0,0x23,0x49,0xB2,0x25,0x65,0xA2,0x27,0x90,0xE2,0x2A,0xE4,0x92,0x30,0xFF,0x00,0xC0,0x24,0x4F,0xF2,0x25,0x6A,0x52,0x28,0xA0,0x12,0x2D,0x04,0x93,0x33,0xFF,0x00,0xD0,0x24,0x53,0x92,0x26,0x7A,0xA2,0x29,0xBB,0x82,0x2F,0x3A,0xD3,0x36,0xFF,0x00,0x50,0x25,0x55,0x02,0x27,0x8F,0xB2,0x2A,0xE1,0x82,0x31,0x5F,0x13,0x39,0xFF,0x00,0x50,0x25,0x57,0xB2,0x27,0x9B,0x72,0x2C,0xFD,0x02,0x34,0x8A,0x33,0x3C,0xFF,0x00,0xA0,0x25,0x59,0x32,0x28,0xAA,0xB2,0x2D,0x1D,0xF3,0x35,0xAA,0x83,0x3E,0xFF,0x00,0x00,0x26,0x60,0x72,0x29,0xCE,0xE2,0x30,0x59,0x03,0x3A,0xF1,0xB3,0x43,0xFF,0x00,0xC0,0x26,0x6C,0xF2,0x2B,0x0E,0x63,0x36,0xC5,0x83,0x41,0x74,0xA4,0x4C,0xFF,
0x00,0xF0,0x27,0x7D,0x52,0x2E,0x49,0x43,0x3B,0x18,0x04,0x48,0xE8,0x54,0x54,0xFF,0x00,0x00,0x29,0x8D,0xD2,0x31,0x8C,0x93,0x3F,0x68,0xC4,0x4D,0x4C,0x05,0x5B,0xFF,0x00,0x10,0x2A,0xA0,0x42,0x34,0xC8,0xC3,0x43,0xB5,0x04,0x53,0xA8,0x35,0x61,0xFF,0x00,0x80,0x2B,0xBB,0x12,0x37,0xF9,0x53,0x47,0xF8,0xC4,0x57,0xFC,0xE5,0x66,0xFF,0x00,0x80,0x2E,0xE8,0x42,0x3C,0x64,0xE4,0x4E,0x78,0x95,0x60,0x95,0x66,0x71,0xFF,0x00,0x80,0x32,0x2A,0x03,0x42,0xCA,0x04,0x56,0xF4,0x35,0x68,0x1F,0xB7,0x7A,0xFF,0x00,0xC0,0x35,0x5F,0x83,0x46,0x1C,0xA5,0x5B,0x5A,0x76,0x6F,0x9B,0xA7,0x83,0xFF,0x00,0xA0,0x38,0x8B,0x83,0x4A,0x68,0x05,0x61,0xB8,0xE6,0x75,0x14,0xB8,0x8B,0xFF,0x00,0x50,0x3B,0xB4,0x73,0x4E,0xA9,0xF5,0x65,0x11,0x67,0x7C,0x85,0xD8,0x93,0xFF,0x00,0xC0,0x3D,0xDC,0xD3,0x51,0xED,0x85,0x6A,0x65,0x47,0x82,0xF4,0xE8,0x9B,0xFF,0x00,0x80,0x40,0x07,0x04,0x55,0x2C,0x06,0x6F,0xB8,0x07,0x88,0x61,0x79,0xA3,0xFF,0x00,0x80,0x41,0x18,0xC4,0x56,0x48,0x36,0x71,0xE0,0xE7,0x8A,0x97,0x49,0xA7,0xFF,
0x00,0xC0,0x42,0x2D,0x54,0x58,0x65,0x46,0x73,0x05,0xD8,0x8D,0xCB,0xF9,0xAA,0xFF,0x00,0xF0,0x43,0x3E,0xD4,0x59,0x82,0x26,0x75,0x29,0x88,0x90,0xFF,0xC9,0xAE,0xFF,0x00,0xE0,0x44,0x4E,0x34,0x5B,0xA0,0x06,0x77,0x4E,0x48,0x93,0x32,0x7A,0xB2,0xFF,0x00,0x00,0x46,0x60,0xC4,0x5C,0xBA,0x46,0x79,0x74,0x08,0x96,0x64,0x6A,0xB6,0xFF},

{0x00,0x00,0x47,0x70,0x44,0x5E,0xD6,0x46,0x7B,0x99,0xB8,0x98,0x98,0x2A,0xBA,0xFF,0x00,0x30,0x48,0x81,0x84,0x5F,0xF0,0x46,0x7D,0xBD,0x68,0x9B,0xCD,0x1A,0xBE,0xFF,0x00,0x40,0x49,0x95,0xE4,0x60,0x0C,0x07,0x7F,0xE0,0x18,0x9E,0x00,0xAB,0xC1,0xFF,0x00,0x30,0x4A,0xA3,0x74,0x62,0x24,0xF7,0x80,0x06,0xE9,0xA0,0x39,0x8B,0xC5,0xFF,0x00,0x30,0x4B,0xB3,0xB4,0x63,0x3C,0x27,0x83,0x2C,0xB9,0xA3,0x6C,0x1B,0xC9,0xFF,0x00,0x30,0x4B,0xB3,0xB4,0x63,0x3C,0x27,0x83,0x2C,0xB9,0xA3,0x6C,0x1B,0xC9,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x50,0x11,0x17,0xA1,0x11,0x1E,0x21,0x12,0x26,0xA1,0x12,0x35,0x61,0x13,0xFF,0x00,0xB0,0x22,0x2F,0x42,0x23,0x3D,0x52,0x24,0x4C,0x42,0x25,0x6B,0xD2,0x26,0xFF,0x00,0xD0,0x23,0x40,0x72,0x24,0x4D,0x82,0x25,0x5E,0xC2,0x26,0x7D,0x82,0x28,0xFF,0x00,0xD0,0x23,0x40,0xC2,0x24,0x55,0x62,0x26,0x74,0x82,0x28,0xA8,0x12,0x2C,0xFF,0x00,0xF0,0x23,0x49,0xB2,0x25,0x65,0xA2,0x27,0x90,0xE2,0x2A,0xE4,0x92,0x30,0xFF,
0x00,0xC0,0x24,0x4F,0xF2,0x25,0x6A,0x52,0x28,0xA0,0x12,0x2D,0x04,0x93,0x33,0xFF,0x00,0xD0,0x24,0x53,0x92,0x26,0x7A,0xA2,0x29,0xBB,0x82,0x2F,0x3A,0xD3,0x36,0xFF,0x00,0x50,0x25,0x55,0x02,0x27,0x8F,0xB2,0x2A,0xE1,0x82,0x31,0x5F,0x13,0x39,0xFF,0x00,0x50,0x25,0x57,0xB2,0x27,0x9B,0x72,0x2C,0xFD,0x02,0x34,0x8A,0x33,0x3C,0xFF,0x00,0xA0,0x25,0x59,0x32,0x28,0xAA,0xB2,0x2D,0x1D,0xF3,0x35,0xAA,0x83,0x3E,0xFF,0x00,0x00,0x26,0x60,0x72,0x29,0xCE,0xE2,0x30,0x59,0x03,0x3A,0xF1,0xB3,0x43,0xFF,0x00,0xC0,0x26,0x6C,0xF2,0x2B,0x0E,0x63,0x36,0xC5,0x83,0x41,0x74,0xA4,0x4C,0xFF,0x00,0xF0,0x27,0x7D,0x52,0x2E,0x49,0x43,0x3B,0x18,0x04,0x48,0xE8,0x54,0x54,0xFF,0x00,0x00,0x29,0x8D,0xD2,0x31,0x8C,0x93,0x3F,0x68,0xC4,0x4D,0x4C,0x05,0x5B,0xFF,0x00,0x10,0x2A,0xA0,0x42,0x34,0xC8,0xC3,0x43,0xB5,0x04,0x53,0xA8,0x35,0x61,0xFF,0x00,0x80,0x2B,0xBB,0x12,0x37,0xF9,0x53,0x47,0xF8,0xC4,0x57,0xFC,0xE5,0x66,0xFF,0x00,0x80,0x2E,0xE8,0x42,0x3C,0x64,0xE4,0x4E,0x78,0x95,0x60,0x95,0x66,0x71,0xFF,
0x00,0x80,0x32,0x2A,0x03,0x42,0xCA,0x04,0x56,0xF4,0x35,0x68,0x1F,0xB7,0x7A,0xFF,0x00,0xC0,0x35,0x5F,0x83,0x46,0x1C,0xA5,0x5B,0x5A,0x76,0x6F,0x9B,0xA7,0x83,0xFF,0x00,0xA0,0x38,0x8B,0x83,0x4A,0x68,0x05,0x61,0xB8,0xE6,0x75,0x14,0xB8,0x8B,0xFF,0x00,0x50,0x3B,0xB4,0x73,0x4E,0xA9,0xF5,0x65,0x11,0x67,0x7C,0x85,0xD8,0x93,0xFF,0x00,0xC0,0x3D,0xDC,0xD3,0x51,0xED,0x85,0x6A,0x65,0x47,0x82,0xF4,0xE8,0x9B,0xFF,0x00,0x80,0x40,0x07,0x04,0x55,0x2C,0x06,0x6F,0xB8,0x07,0x88,0x61,0x79,0xA3,0xFF,0x00,0x80,0x41,0x18,0xC4,0x56,0x48,0x36,0x71,0xE0,0xE7,0x8A,0x97,0x49,0xA7,0xFF,0x00,0xC0,0x42,0x2D,0x54,0x58,0x65,0x46,0x73,0x05,0xD8,0x8D,0xCB,0xF9,0xAA,0xFF,0x00,0xF0,0x43,0x3E,0xD4,0x59,0x82,0x26,0x75,0x29,0x88,0x90,0xFF,0xC9,0xAE,0xFF,0x00,0xE0,0x44,0x4E,0x34,0x5B,0xA0,0x06,0x77,0x4E,0x48,0x93,0x32,0x7A,0xB2,0xFF,0x00,0x00,0x46,0x60,0xC4,0x5C,0xBA,0x46,0x79,0x74,0x08,0x96,0x64,0x6A,0xB6,0xFF,0x00,0x00,0x47,0x70,0x44,0x5E,0xD6,0x46,0x7B,0x99,0xB8,0x98,0x98,0x2A,0xBA,0xFF,
0x00,0x30,0x48,0x81,0x84,0x5F,0xF0,0x46,0x7D,0xBD,0x68,0x9B,0xCD,0x1A,0xBE,0xFF,0x00,0x40,0x49,0x95,0xE4,0x60,0x0C,0x07,0x7F,0xE0,0x18,0x9E,0x00,0xAB,0xC1,0xFF,0x00,0x30,0x4A,0xA3,0x74,0x62,0x24,0xF7,0x80,0x06,0xE9,0xA0,0x39,0x8B,0xC5,0xFF,0x00,0x30,0x4B,0xB3,0xB4,0x63,0x3C,0x27,0x83,0x2C,0xB9,0xA3,0x6C,0x1B,0xC9,0xFF,0x00,0x30,0x4B,0xB3,0xB4,0x63,0x3C,0x27,0x83,0x2C,0xB9,0xA3,0x6C,0x1B,0xC9,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x50,0x11,0x17,0xA1,0x11,0x1E,0x21,0x12,0x26,0xA1,0x12,0x35,0x61,0x13,0xFF,0x00,0xB0,0x22,0x2F,0x42,0x23,0x3D,0x52,0x24,0x4C,0x42,0x25,0x6B,0xD2,0x26,0xFF,0x00,0xD0,0x23,0x40,0x72,0x24,0x4D,0x82,0x25,0x5E,0xC2,0x26,0x7D,0x82,0x28,0xFF,0x00,0xD0,0x23,0x40,0xC2,0x24,0x55,0x62,0x26,0x74,0x82,0x28,0xA8,0x12,0x2C,0xFF,0x00,0xF0,0x23,0x49,0xB2,0x25,0x65,0xA2,0x27,0x90,0xE2,0x2A,0xE4,0x92,0x30,0xFF,0x00,0xC0,0x24,0x4F,0xF2,0x25,0x6A,0x52,0x28,0xA0,0x12,0x2D,0x04,0x93,0x33,0xFF,
0x00,0xD0,0x24,0x53,0x92,0x26,0x7A,0xA2,0x29,0xBB,0x82,0x2F,0x3A,0xD3,0x36,0xFF,0x00,0x50,0x25,0x55,0x02,0x27,0x8F,0xB2,0x2A,0xE1,0x82,0x31,0x5F,0x13,0x39,0xFF,0x00,0x50,0x25,0x57,0xB2,0x27,0x9B,0x72,0x2C,0xFD,0x02,0x34,0x8A,0x33,0x3C,0xFF,0x00,0xA0,0x25,0x59,0x32,0x28,0xAA,0xB2,0x2D,0x1D,0xF3,0x35,0xAA,0x83,0x3E,0xFF,0x00,0x00,0x26,0x60,0x72,0x29,0xCE,0xE2,0x30,0x59,0x03,0x3A,0xF1,0xB3,0x43,0xFF,0x00,0xC0,0x26,0x6C,0xF2,0x2B,0x0E,0x63,0x36,0xC5,0x83,0x41,0x74,0xA4,0x4C,0xFF,0x00,0xF0,0x27,0x7D,0x52,0x2E,0x49,0x43,0x3B,0x18,0x04,0x48,0xE8,0x54,0x54,0xFF,0x00,0x00,0x29,0x8D,0xD2,0x31,0x8C,0x93,0x3F,0x68,0xC4,0x4D,0x4C,0x05,0x5B,0xFF,0x00,0x10,0x2A,0xA0,0x42,0x34,0xC8,0xC3,0x43,0xB5,0x04,0x53,0xA8,0x35,0x61,0xFF,0x00,0x80,0x2B,0xBB,0x12,0x37,0xF9,0x53,0x47,0xF8,0xC4,0x57,0xFC,0xE5,0x66,0xFF,0x00,0x80,0x2E,0xE8,0x42,0x3C,0x64,0xE4,0x4E,0x78,0x95,0x60,0x95,0x66,0x71,0xFF,0x00,0x80,0x32,0x2A,0x03,0x42,0xCA,0x04,0x56,0xF4,0x35,0x68,0x1F,0xB7,0x7A,0xFF,
0x00,0xC0,0x35,0x5F,0x83,0x46,0x1C,0xA5,0x5B,0x5A,0x76,0x6F,0x9B,0xA7,0x83,0xFF,0x00,0xA0,0x38,0x8B,0x83,0x4A,0x68,0x05,0x61,0xB8,0xE6,0x75,0x14,0xB8,0x8B,0xFF,0x00,0x50,0x3B,0xB4,0x73,0x4E,0xA9,0xF5,0x65,0x11,0x67,0x7C,0x85,0xD8,0x93,0xFF,0x00,0xC0,0x3D,0xDC,0xD3,0x51,0xED,0x85,0x6A,0x65,0x47,0x82,0xF4,0xE8,0x9B,0xFF
},
{0x00,0x80,0x40,0x07,0x04,0x55,0x2C,0x06,0x6F,0xB8,0x07,0x88,0x61,0x79,0xA3,0xFF,0x00,0x80,0x41,0x18,0xC4,0x56,0x48,0x36,0x71,0xE0,0xE7,0x8A,0x97,0x49,0xA7,0xFF,0x00,0xC0,0x42,0x2D,0x54,0x58,0x65,0x46,0x73,0x05,0xD8,0x8D,0xCB,0xF9,0xAA,0xFF,0x00,0xF0,0x43,0x3E,0xD4,0x59,0x82,0x26,0x75,0x29,0x88,0x90,0xFF,0xC9,0xAE,0xFF,0x00,0xE0,0x44,0x4E,0x34,0x5B,0xA0,0x06,0x77,0x4E,0x48,0x93,0x32,0x7A,0xB2,0xFF,0x00,0x00,0x46,0x60,0xC4,0x5C,0xBA,0x46,0x79,0x74,0x08,0x96,0x64,0x6A,0xB6,0xFF,0x00,0x00,0x47,0x70,0x44,0x5E,0xD6,0x46,0x7B,0x99,0xB8,0x98,0x98,0x2A,0xBA,0xFF,0x00,0x30,0x48,0x81,0x84,0x5F,0xF0,0x46,0x7D,0xBD,0x68,0x9B,0xCD,0x1A,0xBE,0xFF,0x00,0x40,0x49,0x95,0xE4,0x60,0x0C,0x07,0x7F,0xE0,0x18,0x9E,0x00,0xAB,0xC1,0xFF,0x00,0x30,0x4A,0xA3,0x74,0x62,0x24,0xF7,0x80,0x06,0xE9,0xA0,0x39,0x8B,0xC5,0xFF,0x00,0x30,0x4B,0xB3,0xB4,0x63,0x3C,0x27,0x83,0x2C,0xB9,0xA3,0x6C,0x1B,0xC9,0xFF,0x00,0x30,0x4B,0xB3,0xB4,0x63,0x3C,0x27,0x83,0x2C,0xB9,0xA3,0x6C,0x1B,0xC9,0xFF,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x50,0x11,0x17,0xA1,0x11,0x1E,0x21,0x12,0x26,0xA1,0x12,0x35,0x61,0x13,0xFF,0x00,0xB0,0x22,0x2F,0x42,0x23,0x3D,0x52,0x24,0x4C,0x42,0x25,0x6B,0xD2,0x26,0xFF,0x00,0xD0,0x23,0x40,0x72,0x24,0x4D,0x82,0x25,0x5E,0xC2,0x26,0x7D,0x82,0x28,0xFF,0x00,0xD0,0x23,0x40,0xC2,0x24,0x55,0x62,0x26,0x74,0x82,0x28,0xA8,0x12,0x2C,0xFF,0x00,0xF0,0x23,0x49,0xB2,0x25,0x65,0xA2,0x27,0x90,0xE2,0x2A,0xE4,0x92,0x30,0xFF,0x00,0xC0,0x24,0x4F,0xF2,0x25,0x6A,0x52,0x28,0xA0,0x12,0x2D,0x04,0x93,0x33,0xFF,0x00,0xD0,0x24,0x53,0x92,0x26,0x7A,0xA2,0x29,0xBB,0x82,0x2F,0x3A,0xD3,0x36,0xFF,0x00,0x50,0x25,0x55,0x02,0x27,0x8F,0xB2,0x2A,0xE1,0x82,0x31,0x5F,0x13,0x39,0xFF,0x00,0x50,0x25,0x57,0xB2,0x27,0x9B,0x72,0x2C,0xFD,0x02,0x34,0x8A,0x33,0x3C,0xFF,0x00,0xA0,0x25,0x59,0x32,0x28,0xAA,0xB2,0x2D,0x1D,0xF3,0x35,0xAA,0x83,0x3E,0xFF,0x00,0x00,0x26,0x60,0x72,0x29,0xCE,0xE2,0x30,0x59,0x03,0x3A,0xF1,0xB3,0x43,0xFF,
0x00,0xC0,0x26,0x6C,0xF2,0x2B,0x0E,0x63,0x36,0xC5,0x83,0x41,0x74,0xA4,0x4C,0xFF,0x00,0xF0,0x27,0x7D,0x52,0x2E,0x49,0x43,0x3B,0x18,0x04,0x48,0xE8,0x54,0x54,0xFF,0x00,0x00,0x29,0x8D,0xD2,0x31,0x8C,0x93,0x3F,0x68,0xC4,0x4D,0x4C,0x05,0x5B,0xFF,0x00,0x10,0x2A,0xA0,0x42,0x34,0xC8,0xC3,0x43,0xB5,0x04,0x53,0xA8,0x35,0x61,0xFF,0x00,0x80,0x2B,0xBB,0x12,0x37,0xF9,0x53,0x47,0xF8,0xC4,0x57,0xFC,0xE5,0x66,0xFF,0x00,0x80,0x2E,0xE8,0x42,0x3C,0x64,0xE4,0x4E,0x78,0x95,0x60,0x95,0x66,0x71,0xFF,0x00,0x80,0x32,0x2A,0x03,0x42,0xCA,0x04,0x56,0xF4,0x35,0x68,0x1F,0xB7,0x7A,0xFF,0x00,0xC0,0x35,0x5F,0x83,0x46,0x1C,0xA5,0x5B,0x5A,0x76,0x6F,0x9B,0xA7,0x83,0xFF,0x00,0xA0,0x38,0x8B,0x83,0x4A,0x68,0x05,0x61,0xB8,0xE6,0x75,0x14,0xB8,0x8B,0xFF,0x00,0x50,0x3B,0xB4,0x73,0x4E,0xA9,0xF5,0x65,0x11,0x67,0x7C,0x85,0xD8,0x93,0xFF,0x00,0xC0,0x3D,0xDC,0xD3,0x51,0xED,0x85,0x6A,0x65,0x47,0x82,0xF4,0xE8,0x9B,0xFF,0x00,0x80,0x40,0x07,0x04,0x55,0x2C,0x06,0x6F,0xB8,0x07,0x88,0x61,0x79,0xA3,0xFF,
0x00,0x80,0x41,0x18,0xC4,0x56,0x48,0x36,0x71,0xE0,0xE7,0x8A,0x97,0x49,0xA7,0xFF,0x00,0xC0,0x42,0x2D,0x54,0x58,0x65,0x46,0x73,0x05,0xD8,0x8D,0xCB,0xF9,0xAA,0xFF,0x00,0xF0,0x43,0x3E,0xD4,0x59,0x82,0x26,0x75,0x29,0x88,0x90,0xFF,0xC9,0xAE,0xFF,0x00,0xE0,0x44,0x4E,0x34,0x5B,0xA0,0x06,0x77,0x4E,0x48,0x93,0x32,0x7A,0xB2,0xFF,0x00,0x00,0x46,0x60,0xC4,0x5C,0xBA,0x46,0x79,0x74,0x08,0x96,0x64,0x6A,0xB6,0xFF,0x00,0x00,0x47,0x70,0x44,0x5E,0xD6,0x46,0x7B,0x99,0xB8,0x98,0x98,0x2A,0xBA,0xFF,0x00,0x30,0x48,0x81,0x84,0x5F,0xF0,0x46,0x7D,0xBD,0x68,0x9B,0xCD,0x1A,0xBE,0xFF,0x00,0x40,0x49,0x95,0xE4,0x60,0x0C,0x07,0x7F,0xE0,0x18,0x9E,0x00,0xAB,0xC1,0xFF,0x00,0x30,0x4A,0xA3,0x74,0x62,0x24,0xF7,0x80,0x06,0xE9,0xA0,0x39,0x8B,0xC5,0xFF,0x00,0x30,0x4B,0xB3,0xB4,0x63,0x3C,0x27,0x83,0x2C,0xB9,0xA3,0x6C,0x1B,0xC9,0xFF,0x00,0x30,0x4B,0xB3,0xB4,0x63,0x3C,0x27,0x83,0x2C,0xB9,0xA3,0x6C,0x1B,0xC9,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
0x00,0x50,0x11,0x17,0xA1,0x11,0x1E,0x21,0x12,0x26,0xA1,0x12,0x35,0x61,0x13,0xFF,0x00,0xB0,0x22,0x2F,0x42,0x23,0x3D,0x52,0x24,0x4C,0x42,0x25,0x6B,0xD2,0x26,0xFF,0x00,0xD0,0x23,0x40,0x72,0x24,0x4D,0x82,0x25,0x5E,0xC2,0x26,0x7D,0x82,0x28,0xFF,0x00,0xD0,0x23,0x40,0xC2,0x24,0x55,0x62,0x26,0x74,0x82,0x28,0xA8,0x12,0x2C,0xFF,0x00,0xF0,0x23,0x49,0xB2,0x25,0x65,0xA2,0x27,0x90,0xE2,0x2A,0xE4,0x92,0x30,0xFF,0x00,0xC0,0x24,0x4F,0xF2,0x25,0x6A,0x52,0x28,0xA0,0x12,0x2D,0x04,0x93,0x33,0xFF,0x00,0xD0,0x24,0x53,0x92,0x26,0x7A,0xA2,0x29,0xBB,0x82,0x2F,0x3A,0xD3,0x36,0xFF,0x00,0x50,0x25,0x55,0x02,0x27,0x8F,0xB2,0x2A,0xE1,0x82,0x31,0x5F,0x13,0x39,0xFF,0x00,0x50,0x25,0x57,0xB2,0x27,0x9B,0x72,0x2C,0xFD,0x02,0x34,0x8A,0x33,0x3C,0xFF,0x00,0xA0,0x25,0x59,0x32,0x28,0xAA,0xB2,0x2D,0x1D,0xF3,0x35,0xAA,0x83,0x3E,0xFF,0x00,0x00,0x26,0x60,0x72,0x29,0xCE,0xE2,0x30,0x59,0x03,0x3A,0xF1,0xB3,0x43,0xFF,0x00,0xC0,0x26,0x6C,0xF2,0x2B,0x0E,0x63,0x36,0xC5,0x83,0x41,0x74,0xA4,0x4C,0xFF,
0x00,0xF0,0x27,0x7D,0x52,0x2E,0x49,0x43,0x3B,0x18,0x04,0x48,0xE8,0x54,0x54,0xFF,0x00,0x00,0x29,0x8D,0xD2,0x31,0x8C,0x93,0x3F,0x68,0xC4,0x4D,0x4C,0x05,0x5B,0xFF,0x00,0x10,0x2A,0xA0,0x42,0x34,0xC8,0xC3,0x43,0xB5,0x04,0x53,0xA8,0x35,0x61,0xFF,0x00,0x80,0x2B,0xBB,0x12,0x37,0xF9,0x53,0x47,0xF8,0xC4,0x57,0xFC,0xE5,0x66,0xFF
},
{0x00,0x80,0x2E,0xE8,0x42,0x3C,0x64,0xE4,0x4E,0x78,0x95,0x60,0x95,0x66,0x71,0xFF,0x00,0x80,0x32,0x2A,0x03,0x42,0xCA,0x04,0x56,0xF4,0x35,0x68,0x1F,0xB7,0x7A,0xFF,0x00,0xC0,0x35,0x5F,0x83,0x46,0x1C,0xA5,0x5B,0x5A,0x76,0x6F,0x9B,0xA7,0x83,0xFF,0x00,0xA0,0x38,0x8B,0x83,0x4A,0x68,0x05,0x61,0xB8,0xE6,0x75,0x14,0xB8,0x8B,0xFF,0x00,0x50,0x3B,0xB4,0x73,0x4E,0xA9,0xF5,0x65,0x11,0x67,0x7C,0x85,0xD8,0x93,0xFF,0x00,0xC0,0x3D,0xDC,0xD3,0x51,0xED,0x85,0x6A,0x65,0x47,0x82,0xF4,0xE8,0x9B,0xFF,0x00,0x80,0x40,0x07,0x04,0x55,0x2C,0x06,0x6F,0xB8,0x07,0x88,0x61,0x79,0xA3,0xFF,0x00,0x80,0x41,0x18,0xC4,0x56,0x48,0x36,0x71,0xE0,0xE7,0x8A,0x97,0x49,0xA7,0xFF,0x00,0xC0,0x42,0x2D,0x54,0x58,0x65,0x46,0x73,0x05,0xD8,0x8D,0xCB,0xF9,0xAA,0xFF,0x00,0xF0,0x43,0x3E,0xD4,0x59,0x82,0x26,0x75,0x29,0x88,0x90,0xFF,0xC9,0xAE,0xFF,0x00,0xE0,0x44,0x4E,0x34,0x5B,0xA0,0x06,0x77,0x4E,0x48,0x93,0x32,0x7A,0xB2,0xFF,0x00,0x00,0x46,0x60,0xC4,0x5C,0xBA,0x46,0x79,0x74,0x08,0x96,0x64,0x6A,0xB6,0xFF,
0x00,0x00,0x47,0x70,0x44,0x5E,0xD6,0x46,0x7B,0x99,0xB8,0x98,0x98,0x2A,0xBA,0xFF,0x00,0x30,0x48,0x81,0x84,0x5F,0xF0,0x46,0x7D,0xBD,0x68,0x9B,0xCD,0x1A,0xBE,0xFF,0x00,0x40,0x49,0x95,0xE4,0x60,0x0C,0x07,0x7F,0xE0,0x18,0x9E,0x00,0xAB,0xC1,0xFF,0x00,0x30,0x4A,0xA3,0x74,0x62,0x24,0xF7,0x80,0x06,0xE9,0xA0,0x39,0x8B,0xC5,0xFF,0x00,0x30,0x4B,0xB3,0xB4,0x63,0x3C,0x27,0x83,0x2C,0xB9,0xA3,0x6C,0x1B,0xC9,0xFF,0x00,0x30,0x4B,0xB3,0xB4,0x63,0x3C,0x27,0x83,0x2C,0xB9,0xA3,0x6C,0x1B,0xC9,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x50,0x11,0x17,0xA1,0x11,0x1E,0x21,0x12,0x26,0xA1,0x12,0x35,0x61,0x13,0xFF,0x00,0xB0,0x22,0x2F,0x42,0x23,0x3D,0x52,0x24,0x4C,0x42,0x25,0x6B,0xD2,0x26,0xFF,0x00,0xD0,0x23,0x40,0x72,0x24,0x4D,0x82,0x25,0x5E,0xC2,0x26,0x7D,0x82,0x28,0xFF,0x00,0xD0,0x23,0x40,0xC2,0x24,0x55,0x62,0x26,0x74,0x82,0x28,0xA8,0x12,0x2C,0xFF,0x00,0xF0,0x23,0x49,0xB2,0x25,0x65,0xA2,0x27,0x90,0xE2,0x2A,0xE4,0x92,0x30,0xFF,
0x00,0xC0,0x24,0x4F,0xF2,0x25,0x6A,0x52,0x28,0xA0,0x12,0x2D,0x04,0x93,0x33,0xFF,0x00,0xD0,0x24,0x53,0x92,0x26,0x7A,0xA2,0x29,0xBB,0x82,0x2F,0x3A,0xD3,0x36,0xFF,0x00,0x50,0x25,0x55,0x02,0x27,0x8F,0xB2,0x2A,0xE1,0x82,0x31,0x5F,0x13,0x39,0xFF,0x00,0x50,0x25,0x57,0xB2,0x27,0x9B,0x72,0x2C,0xFD,0x02,0x34,0x8A,0x33,0x3C,0xFF,0x00,0xA0,0x25,0x59,0x32,0x28,0xAA,0xB2,0x2D,0x1D,0xF3,0x35,0xAA,0x83,0x3E,0xFF,0x00,0x00,0x26,0x60,0x72,0x29,0xCE,0xE2,0x30,0x59,0x03,0x3A,0xF1,0xB3,0x43,0xFF,0x00,0xC0,0x26,0x6C,0xF2,0x2B,0x0E,0x63,0x36,0xC5,0x83,0x41,0x74,0xA4,0x4C,0xFF,0x00,0xF0,0x27,0x7D,0x52,0x2E,0x49,0x43,0x3B,0x18,0x04,0x48,0xE8,0x54,0x54,0xFF,0x00,0x00,0x29,0x8D,0xD2,0x31,0x8C,0x93,0x3F,0x68,0xC4,0x4D,0x4C,0x05,0x5B,0xFF,0x00,0x10,0x2A,0xA0,0x42,0x34,0xC8,0xC3,0x43,0xB5,0x04,0x53,0xA8,0x35,0x61,0xFF,0x00,0x80,0x2B,0xBB,0x12,0x37,0xF9,0x53,0x47,0xF8,0xC4,0x57,0xFC,0xE5,0x66,0xFF,0x00,0x80,0x2E,0xE8,0x42,0x3C,0x64,0xE4,0x4E,0x78,0x95,0x60,0x95,0x66,0x71,0xFF,
0x00,0x80,0x32,0x2A,0x03,0x42,0xCA,0x04,0x56,0xF4,0x35,0x68,0x1F,0xB7,0x7A,0xFF,0x00,0xC0,0x35,0x5F,0x83,0x46,0x1C,0xA5,0x5B,0x5A,0x76,0x6F,0x9B,0xA7,0x83,0xFF,0x00,0xA0,0x38,0x8B,0x83,0x4A,0x68,0x05,0x61,0xB8,0xE6,0x75,0x14,0xB8,0x8B,0xFF,0x00,0x50,0x3B,0xB4,0x73,0x4E,0xA9,0xF5,0x65,0x11,0x67,0x7C,0x85,0xD8,0x93,0xFF,0x00,0xC0,0x3D,0xDC,0xD3,0x51,0xED,0x85,0x6A,0x65,0x47,0x82,0xF4,0xE8,0x9B,0xFF,0x00,0x80,0x40,0x07,0x04,0x55,0x2C,0x06,0x6F,0xB8,0x07,0x88,0x61,0x79,0xA3,0xFF,0x00,0x80,0x41,0x18,0xC4,0x56,0x48,0x36,0x71,0xE0,0xE7,0x8A,0x97,0x49,0xA7,0xFF,0x00,0xC0,0x42,0x2D,0x54,0x58,0x65,0x46,0x73,0x05,0xD8,0x8D,0xCB,0xF9,0xAA,0xFF,0x00,0xF0,0x43,0x3E,0xD4,0x59,0x82,0x26,0x75,0x29,0x88,0x90,0xFF,0xC9,0xAE,0xFF,0x00,0xE0,0x44,0x4E,0x34,0x5B,0xA0,0x06,0x77,0x4E,0x48,0x93,0x32,0x7A,0xB2,0xFF,0x00,0x00,0x46,0x60,0xC4,0x5C,0xBA,0x46,0x79,0x74,0x08,0x96,0x64,0x6A,0xB6,0xFF,0x00,0x00,0x47,0x70,0x44,0x5E,0xD6,0x46,0x7B,0x99,0xB8,0x98,0x98,0x2A,0xBA,0xFF,
0x00,0x30,0x48,0x81,0x84,0x5F,0xF0,0x46,0x7D,0xBD,0x68,0x9B,0xCD,0x1A,0xBE,0xFF,0x00,0x40,0x49,0x95,0xE4,0x60,0x0C,0x07,0x7F,0xE0,0x18,0x9E,0x00,0xAB,0xC1,0xFF,0x00,0x30,0x4A,0xA3,0x74,0x62,0x24,0xF7,0x80,0x06,0xE9,0xA0,0x39,0x8B,0xC5,0xFF,0x00,0x30,0x4B,0xB3,0xB4,0x63,0x3C,0x27,0x83,0x2C,0xB9,0xA3,0x6C,0x1B,0xC9,0xFF,0x00,0x30,0x4B,0xB3,0xB4,0x63,0x3C,0x27,0x83,0x2C,0xB9,0xA3,0x6C,0x1B,0xC9,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x50,0x11,0x17,0xA1,0x11,0x1E,0x21,0x12,0x26,0xA1,0x12,0x35,0x61,0x13,0xFF,0x00,0xB0,0x22,0x2F,0x42,0x23,0x3D,0x52,0x24,0x4C,0x42,0x25,0x6B,0xD2,0x26,0xFF,0x00,0xD0,0x23,0x40,0x72,0x24,0x4D,0x82,0x25,0x5E,0xC2,0x26,0x7D,0x82,0x28,0xFF,0x00,0xD0,0x23,0x40,0xC2,0x24,0x55,0x62,0x26,0x74,0x82,0x28,0xA8,0x12,0x2C,0xFF,0x00,0xF0,0x23,0x49,0xB2,0x25,0x65,0xA2,0x27,0x90,0xE2,0x2A,0xE4,0x92,0x30,0xFF,0x00,0xC0,0x24,0x4F,0xF2,0x25,0x6A,0x52,0x28,0xA0,0x12,0x2D,0x04,0x93,0x33,0xFF,
0x00,0xD0,0x24,0x53,0x92,0x26,0x7A,0xA2,0x29,0xBB,0x82,0x2F,0x3A,0xD3,0x36,0xFF,0x00,0x50,0x25,0x55,0x02,0x27,0x8F,0xB2,0x2A,0xE1,0x82,0x31,0x5F,0x13,0x39,0xFF,0x00,0x50,0x25,0x57,0xB2,0x27,0x9B,0x72,0x2C,0xFD,0x02,0x34,0x8A,0x33,0x3C,0xFF,0x00,0xA0,0x25,0x59,0x32,0x28,0xAA,0xB2,0x2D,0x1D,0xF3,0x35,0xAA,0x83,0x3E,0xFF},
{0x00,0x00,0x26,0x60,0x72,0x29,0xCE,0xE2,0x30,0x59,0x03,0x3A,0xF1,0xB3,0x43,0xFF,0x00,0xC0,0x26,0x6C,0xF2,0x2B,0x0E,0x63,0x36,0xC5,0x83,0x41,0x74,0xA4,0x4C,0xFF,0x00,0xF0,0x27,0x7D,0x52,0x2E,0x49,0x43,0x3B,0x18,0x04,0x48,0xE8,0x54,0x54,0xFF,0x00,0x00,0x29,0x8D,0xD2,0x31,0x8C,0x93,0x3F,0x68,0xC4,0x4D,0x4C,0x05,0x5B,0xFF,0x00,0x10,0x2A,0xA0,0x42,0x34,0xC8,0xC3,0x43,0xB5,0x04,0x53,0xA8,0x35,0x61,0xFF,0x00,0x80,0x2B,0xBB,0x12,0x37,0xF9,0x53,0x47,0xF8,0xC4,0x57,0xFC,0xE5,0x66,0xFF,0x00,0x80,0x2E,0xE8,0x42,0x3C,0x64,0xE4,0x4E,0x78,0x95,0x60,0x95,0x66,0x71,0xFF,0x00,0x80,0x32,0x2A,0x03,0x42,0xCA,0x04,0x56,0xF4,0x35,0x68,0x1F,0xB7,0x7A,0xFF,0x00,0xC0,0x35,0x5F,0x83,0x46,0x1C,0xA5,0x5B,0x5A,0x76,0x6F,0x9B,0xA7,0x83,0xFF,0x00,0xA0,0x38,0x8B,0x83,0x4A,0x68,0x05,0x61,0xB8,0xE6,0x75,0x14,0xB8,0x8B,0xFF,0x00,0x50,0x3B,0xB4,0x73,0x4E,0xA9,0xF5,0x65,0x11,0x67,0x7C,0x85,0xD8,0x93,0xFF,0x00,0xC0,0x3D,0xDC,0xD3,0x51,0xED,0x85,0x6A,0x65,0x47,0x82,0xF4,0xE8,0x9B,0xFF,
0x00,0x80,0x40,0x07,0x04,0x55,0x2C,0x06,0x6F,0xB8,0x07,0x88,0x61,0x79,0xA3,0xFF,0x00,0x80,0x41,0x18,0xC4,0x56,0x48,0x36,0x71,0xE0,0xE7,0x8A,0x97,0x49,0xA7,0xFF,0x00,0xC0,0x42,0x2D,0x54,0x58,0x65,0x46,0x73,0x05,0xD8,0x8D,0xCB,0xF9,0xAA,0xFF,0x00,0xF0,0x43,0x3E,0xD4,0x59,0x82,0x26,0x75,0x29,0x88,0x90,0xFF,0xC9,0xAE,0xFF,0x00,0xE0,0x44,0x4E,0x34,0x5B,0xA0,0x06,0x77,0x4E,0x48,0x93,0x32,0x7A,0xB2,0xFF,0x00,0x00,0x46,0x60,0xC4,0x5C,0xBA,0x46,0x79,0x74,0x08,0x96,0x64,0x6A,0xB6,0xFF,0x00,0x00,0x47,0x70,0x44,0x5E,0xD6,0x46,0x7B,0x99,0xB8,0x98,0x98,0x2A,0xBA,0xFF,0x00,0x30,0x48,0x81,0x84,0x5F,0xF0,0x46,0x7D,0xBD,0x68,0x9B,0xCD,0x1A,0xBE,0xFF,0x00,0x40,0x49,0x95,0xE4,0x60,0x0C,0x07,0x7F,0xE0,0x18,0x9E,0x00,0xAB,0xC1,0xFF,0x00,0x30,0x4A,0xA3,0x74,0x62,0x24,0xF7,0x80,0x06,0xE9,0xA0,0x39,0x8B,0xC5,0xFF,0x00,0x30,0x4B,0xB3,0xB4,0x63,0x3C,0x27,0x83,0x2C,0xB9,0xA3,0x6C,0x1B,0xC9,0xFF,0x00,0x30,0x4B,0xB3,0xB4,0x63,0x3C,0x27,0x83,0x2C,0xB9,0xA3,0x6C,0x1B,0xC9,0xFF,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x60,0x14,0x47,0xD1,0x14,0x52,0x51,0x15,0x57,0xA1,0x15,0x5E,0x11,0x16,0xFF,0x00,0xC0,0x28,0x8F,0xB2,0x29,0xA4,0xA2,0x2A,0xAE,0x42,0x2B,0xBC,0x22,0x2C,0xFF,0x00,0xD0,0x29,0x9E,0xC2,0x2A,0xB5,0xC2,0x2B,0xBF,0xA2,0x2C,0xCC,0x72,0x2D,0xFF,0x00,0x40,0x2A,0xA2,0x42,0x2B,0xBC,0xB2,0x2C,0xD4,0x22,0x2D,0xDB,0xB2,0x2F,0xFF,0x00,0x60,0x2A,0xA9,0x72,0x2B,0xC3,0xD2,0x2C,0xDB,0x42,0x2D,0xFA,0xE2,0x31,0xFF,0x00,0xF0,0x2A,0xAE,0x02,0x2C,0xCC,0xD2,0x2D,0xE9,0x52,0x2F,0x1B,0xF3,0x34,0xFF,0x00,0x00,0x2B,0xB2,0x62,0x2C,0xD5,0x12,0x2E,0xF4,0x02,0x31,0x4A,0xD3,0x37,0xFF,0x00,0x50,0x2B,0xB4,0x92,0x2C,0xDB,0x72,0x2E,0x08,0x03,0x33,0x6F,0x33,0x3A,0xFF,0x00,0x50,0x2B,0xB8,0x02,0x2D,0xE1,0x92,0x2F,0x20,0x93,0x35,0x9A,0x53,0x3D,0xFF,0x00,0xA0,0x2B,0xBA,0x52,0x2D,0xE7,0xA2,0x30,0x3B,0x83,0x37,0xBB,0x73,0x3F,0xFF,0x00,0x30,0x2C,0xC1,0xF2,0x2D,0x00,0x03,0x33,0x6B,0x53,0x3B,0x01,0x34,0x44,0xFF,
0x00,0xE0,0x2C,0xCF,0x82,0x2F,0x37,0x83,0x37,0xCB,0x43,0x42,0x7C,0xB4,0x4C,0xFF,0x00,0x90,0x2D,0xD9,0x82,0x31,0x70,0x23,0x3C,0x1F,0x74,0x48,0xEB,0x04,0x54,0xFF,0x00,0x40,0x2E,0xE0,0x02,0x34,0xA6,0x83,0x40,0x6F,0x04,0x4E,0x4C,0xA5,0x5A,0xFF,0x00,0xD0,0x2E,0xEE,0xB2,0x36,0xDC,0x93,0x44,0xB4,0x04,0x53,0xA7,0x95,0x60,0xFF,0x00,0x80,0x2F,0xFB,0x42,0x39,0x10,0x44,0x48,0xFA,0xC4,0x57,0xF8,0x45,0x66,0xFF,0x00,0xD0,0x31,0x1C,0x03,0x3E,0x6C,0x04,0x4F,0x70,0x35,0x60,0x8C,0x46,0x70,0xFF,0x00,0xB0,0x34,0x4C,0xC3,0x42,0xCE,0xF4,0x55,0xEC,0xE5,0x67,0x14,0x97,0x79,0xFF,0x00,0x50,0x37,0x77,0x03,0x47,0x1C,0x85,0x5B,0x52,0xC6,0x6E,0x90,0x27,0x82,0xFF,0x00,0xF0,0x39,0xA0,0xD3,0x4A,0x64,0x85,0x60,0xB0,0x46,0x75,0x05,0x78,0x8A,0xFF,0x00,0x80,0x3C,0xC8,0x83,0x4E,0xA8,0x85,0x65,0x06,0x87,0x7B,0x75,0x78,0x92,0xFF,0x00,0xD0,0x3E,0xEC,0xE3,0x51,0xE9,0x05,0x6A,0x58,0x47,0x81,0xE0,0x28,0x9A,0xFF,0x00,0x30,0x41,0x13,0x14,0x55,0x27,0x66,0x6E,0xA8,0x07,0x87,0x4C,0xB9,0xA1,0xFF,
0x00,0x40,0x42,0x24,0xA4,0x56,0x44,0x86,0x70,0xD0,0xC7,0x89,0x80,0x79,0xA5,0xFF,0x00,0x50,0x43,0x36,0x24,0x58,0x60,0x86,0x72,0xF4,0x87,0x8C,0xB4,0x39,0xA9,0xFF,0x00,0x80,0x44,0x48,0x94,0x59,0x7C,0x86,0x74,0x1C,0x48,0x8F,0xE6,0xF9,0xAC,0xFF,0x00,0x80,0x45,0x59,0x04,0x5B,0x96,0x86,0x76,0x40,0x08,0x92,0x18,0xBA,0xB0,0xFF,0x00,0x80,0x46,0x68,0x84,0x5C,0xB1,0x86,0x78,0x64,0x88,0x94,0x4C,0x7A,0xB4,0xFF,0x00,0xA0,0x47,0x79,0xF4,0x5D,0xCC,0x56,0x7A,0x86,0x18,0x97,0x80,0x3A,0xB8,0xFF,0x00,0x90,0x48,0x88,0x44,0x5F,0xE6,0x46,0x7C,0xA9,0xC8,0x99,0xB0,0xEA,0xBB,0xFF,0x00,0xA0,0x49,0x99,0xA4,0x60,0x02,0x47,0x7E,0xCD,0x68,0x9C,0xE6,0xBA,0xBF,0xFF,0x00,0x80,0x4A,0xA8,0x04,0x62,0x18,0x07,0x80,0xF0,0x18,0x9F,0x1A,0x9B,0xC3,0xFF,0x00,0x80,0x4B,0xB8,0x44,0x63,0x33,0xF7,0x81,0x17,0xF9,0xA1,0x4F,0x0B,0xC7,0xFF,0x00,0x80,0x4B,0xB8,0x44,0x63,0x33,0xF7,0x81,0x17,0xF9,0xA1,0x4F,0x0B,0xC7,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
0x00,0x60,0x14,0x47,0xD1,0x14,0x52,0x51,0x15,0x57,0xA1,0x15,0x5E,0x11,0x16,0xFF,0x00,0xC0,0x28,0x8F,0xB2,0x29,0xA4,0xA2,0x2A,0xAE,0x42,0x2B,0xBC,0x22,0x2C,0xFF,0x00,0xD0,0x29,0x9E,0xC2,0x2A,0xB5,0xC2,0x2B,0xBF,0xA2,0x2C,0xCC,0x72,0x2D,0xFF,0x00,0x40,0x2A,0xA2,0x42,0x2B,0xBC,0xB2,0x2C,0xD4,0x22,0x2D,0xDB,0xB2,0x2F,0xFF
},
{0x00,0x60,0x2A,0xA9,0x72,0x2B,0xC3,0xD2,0x2C,0xDB,0x42,0x2D,0xFA,0xE2,0x31,0xFF,0x00,0xF0,0x2A,0xAE,0x02,0x2C,0xCC,0xD2,0x2D,0xE9,0x52,0x2F,0x1B,0xF3,0x34,0xFF,0x00,0x00,0x2B,0xB2,0x62,0x2C,0xD5,0x12,0x2E,0xF4,0x02,0x31,0x4A,0xD3,0x37,0xFF,0x00,0x50,0x2B,0xB4,0x92,0x2C,0xDB,0x72,0x2E,0x08,0x03,0x33,0x6F,0x33,0x3A,0xFF,0x00,0x50,0x2B,0xB8,0x02,0x2D,0xE1,0x92,0x2F,0x20,0x93,0x35,0x9A,0x53,0x3D,0xFF,0x00,0xA0,0x2B,0xBA,0x52,0x2D,0xE7,0xA2,0x30,0x3B,0x83,0x37,0xBB,0x73,0x3F,0xFF,0x00,0x30,0x2C,0xC1,0xF2,0x2D,0x00,0x03,0x33,0x6B,0x53,0x3B,0x01,0x34,0x44,0xFF,0x00,0xE0,0x2C,0xCF,0x82,0x2F,0x37,0x83,0x37,0xCB,0x43,0x42,0x7C,0xB4,0x4C,0xFF,0x00,0x90,0x2D,0xD9,0x82,0x31,0x70,0x23,0x3C,0x1F,0x74,0x48,0xEB,0x04,0x54,0xFF,0x00,0x40,0x2E,0xE0,0x02,0x34,0xA6,0x83,0x40,0x6F,0x04,0x4E,0x4C,0xA5,0x5A,0xFF,0x00,0xD0,0x2E,0xEE,0xB2,0x36,0xDC,0x93,0x44,0xB4,0x04,0x53,0xA7,0x95,0x60,0xFF,0x00,0x80,0x2F,0xFB,0x42,0x39,0x10,0x44,0x48,0xFA,0xC4,0x57,0xF8,0x45,0x66,0xFF,
0x00,0xD0,0x31,0x1C,0x03,0x3E,0x6C,0x04,0x4F,0x70,0x35,0x60,0x8C,0x46,0x70,0xFF,0x00,0xB0,0x34,0x4C,0xC3,0x42,0xCE,0xF4,0x55,0xEC,0xE5,0x67,0x14,0x97,0x79,0xFF,0x00,0x50,0x37,0x77,0x03,0x47,0x1C,0x85,0x5B,0x52,0xC6,0x6E,0x90,0x27,0x82,0xFF,0x00,0xF0,0x39,0xA0,0xD3,0x4A,0x64,0x85,0x60,0xB0,0x46,0x75,0x05,0x78,0x8A,0xFF,0x00,0x80,0x3C,0xC8,0x83,0x4E,0xA8,0x85,0x65,0x06,0x87,0x7B,0x75,0x78,0x92,0xFF,0x00,0xD0,0x3E,0xEC,0xE3,0x51,0xE9,0x05,0x6A,0x58,0x47,0x81,0xE0,0x28,0x9A,0xFF,0x00,0x30,0x41,0x13,0x14,0x55,0x27,0x66,0x6E,0xA8,0x07,0x87,0x4C,0xB9,0xA1,0xFF,0x00,0x40,0x42,0x24,0xA4,0x56,0x44,0x86,0x70,0xD0,0xC7,0x89,0x80,0x79,0xA5,0xFF,0x00,0x50,0x43,0x36,0x24,0x58,0x60,0x86,0x72,0xF4,0x87,0x8C,0xB4,0x39,0xA9,0xFF,0x00,0x80,0x44,0x48,0x94,0x59,0x7C,0x86,0x74,0x1C,0x48,0x8F,0xE6,0xF9,0xAC,0xFF,0x00,0x80,0x45,0x59,0x04,0x5B,0x96,0x86,0x76,0x40,0x08,0x92,0x18,0xBA,0xB0,0xFF,0x00,0x80,0x46,0x68,0x84,0x5C,0xB1,0x86,0x78,0x64,0x88,0x94,0x4C,0x7A,0xB4,0xFF,
0x00,0xA0,0x47,0x79,0xF4,0x5D,0xCC,0x56,0x7A,0x86,0x18,0x97,0x80,0x3A,0xB8,0xFF,0x00,0x90,0x48,0x88,0x44,0x5F,0xE6,0x46,0x7C,0xA9,0xC8,0x99,0xB0,0xEA,0xBB,0xFF,0x00,0xA0,0x49,0x99,0xA4,0x60,0x02,0x47,0x7E,0xCD,0x68,0x9C,0xE6,0xBA,0xBF,0xFF,0x00,0x80,0x4A,0xA8,0x04,0x62,0x18,0x07,0x80,0xF0,0x18,0x9F,0x1A,0x9B,0xC3,0xFF,0x00,0x80,0x4B,0xB8,0x44,0x63,0x33,0xF7,0x81,0x17,0xF9,0xA1,0x4F,0x0B,0xC7,0xFF,0x00,0x80,0x4B,0xB8,0x44,0x63,0x33,0xF7,0x81,0x17,0xF9,0xA1,0x4F,0x0B,0xC7,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x60,0x14,0x47,0xD1,0x14,0x52,0x51,0x15,0x57,0xA1,0x15,0x5E,0x11,0x16,0xFF,0x00,0xC0,0x28,0x8F,0xB2,0x29,0xA4,0xA2,0x2A,0xAE,0x42,0x2B,0xBC,0x22,0x2C,0xFF,0x00,0xD0,0x29,0x9E,0xC2,0x2A,0xB5,0xC2,0x2B,0xBF,0xA2,0x2C,0xCC,0x72,0x2D,0xFF,0x00,0x40,0x2A,0xA2,0x42,0x2B,0xBC,0xB2,0x2C,0xD4,0x22,0x2D,0xDB,0xB2,0x2F,0xFF,0x00,0x60,0x2A,0xA9,0x72,0x2B,0xC3,0xD2,0x2C,0xDB,0x42,0x2D,0xFA,0xE2,0x31,0xFF,
0x00,0xF0,0x2A,0xAE,0x02,0x2C,0xCC,0xD2,0x2D,0xE9,0x52,0x2F,0x1B,0xF3,0x34,0xFF,0x00,0x00,0x2B,0xB2,0x62,0x2C,0xD5,0x12,0x2E,0xF4,0x02,0x31,0x4A,0xD3,0x37,0xFF,0x00,0x50,0x2B,0xB4,0x92,0x2C,0xDB,0x72,0x2E,0x08,0x03,0x33,0x6F,0x33,0x3A,0xFF,0x00,0x50,0x2B,0xB8,0x02,0x2D,0xE1,0x92,0x2F,0x20,0x93,0x35,0x9A,0x53,0x3D,0xFF,0x00,0xA0,0x2B,0xBA,0x52,0x2D,0xE7,0xA2,0x30,0x3B,0x83,0x37,0xBB,0x73,0x3F,0xFF,0x00,0x30,0x2C,0xC1,0xF2,0x2D,0x00,0x03,0x33,0x6B,0x53,0x3B,0x01,0x34,0x44,0xFF,0x00,0xE0,0x2C,0xCF,0x82,0x2F,0x37,0x83,0x37,0xCB,0x43,0x42,0x7C,0xB4,0x4C,0xFF,0x00,0x90,0x2D,0xD9,0x82,0x31,0x70,0x23,0x3C,0x1F,0x74,0x48,0xEB,0x04,0x54,0xFF,0x00,0x40,0x2E,0xE0,0x02,0x34,0xA6,0x83,0x40,0x6F,0x04,0x4E,0x4C,0xA5,0x5A,0xFF,0x00,0xD0,0x2E,0xEE,0xB2,0x36,0xDC,0x93,0x44,0xB4,0x04,0x53,0xA7,0x95,0x60,0xFF,0x00,0x80,0x2F,0xFB,0x42,0x39,0x10,0x44,0x48,0xFA,0xC4,0x57,0xF8,0x45,0x66,0xFF,0x00,0xD0,0x31,0x1C,0x03,0x3E,0x6C,0x04,0x4F,0x70,0x35,0x60,0x8C,0x46,0x70,0xFF,
0x00,0xB0,0x34,0x4C,0xC3,0x42,0xCE,0xF4,0x55,0xEC,0xE5,0x67,0x14,0x97,0x79,0xFF,0x00,0x50,0x37,0x77,0x03,0x47,0x1C,0x85,0x5B,0x52,0xC6,0x6E,0x90,0x27,0x82,0xFF,0x00,0xF0,0x39,0xA0,0xD3,0x4A,0x64,0x85,0x60,0xB0,0x46,0x75,0x05,0x78,0x8A,0xFF,0x00,0x80,0x3C,0xC8,0x83,0x4E,0xA8,0x85,0x65,0x06,0x87,0x7B,0x75,0x78,0x92,0xFF,0x00,0xD0,0x3E,0xEC,0xE3,0x51,0xE9,0x05,0x6A,0x58,0x47,0x81,0xE0,0x28,0x9A,0xFF,0x00,0x30,0x41,0x13,0x14,0x55,0x27,0x66,0x6E,0xA8,0x07,0x87,0x4C,0xB9,0xA1,0xFF,0x00,0x40,0x42,0x24,0xA4,0x56,0x44,0x86,0x70,0xD0,0xC7,0x89,0x80,0x79,0xA5,0xFF,0x00,0x50,0x43,0x36,0x24,0x58,0x60,0x86,0x72,0xF4,0x87,0x8C,0xB4,0x39,0xA9,0xFF,0x00,0x80,0x44,0x48,0x94,0x59,0x7C,0x86,0x74,0x1C,0x48,0x8F,0xE6,0xF9,0xAC,0xFF,0x00,0x80,0x45,0x59,0x04,0x5B,0x96,0x86,0x76,0x40,0x08,0x92,0x18,0xBA,0xB0,0xFF,0x00,0x80,0x46,0x68,0x84,0x5C,0xB1,0x86,0x78,0x64,0x88,0x94,0x4C,0x7A,0xB4,0xFF,0x00,0xA0,0x47,0x79,0xF4,0x5D,0xCC,0x56,0x7A,0x86,0x18,0x97,0x80,0x3A,0xB8,0xFF,
0x00,0x90,0x48,0x88,0x44,0x5F,0xE6,0x46,0x7C,0xA9,0xC8,0x99,0xB0,0xEA,0xBB,0xFF,0x00,0xA0,0x49,0x99,0xA4,0x60,0x02,0x47,0x7E,0xCD,0x68,0x9C,0xE6,0xBA,0xBF,0xFF,0x00,0x80,0x4A,0xA8,0x04,0x62,0x18,0x07,0x80,0xF0,0x18,0x9F,0x1A,0x9B,0xC3,0xFF,0x00,0x80,0x4B,0xB8,0x44,0x63,0x33,0xF7,0x81,0x17,0xF9,0xA1,0x4F,0x0B,0xC7,0xFF},
{
    0x00,0x80,0x4B,0xB8,0x44,0x63,0x33,0xF7,0x81,0x17,0xF9,0xA1,0x4F,0x0B,0xC7,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x60,0x14,0x47,0xD1,0x14,0x52,0x51,0x15,0x57,0xA1,0x15,0x5E,0x11,0x16,0xFF,0x00,0xC0,0x28,0x8F,0xB2,0x29,0xA4,0xA2,0x2A,0xAE,0x42,0x2B,0xBC,0x22,0x2C,0xFF,0x00,0xD0,0x29,0x9E,0xC2,0x2A,0xB5,0xC2,0x2B,0xBF,0xA2,0x2C,0xCC,0x72,0x2D,0xFF,0x00,0x40,0x2A,0xA2,0x42,0x2B,0xBC,0xB2,0x2C,0xD4,0x22,0x2D,0xDB,0xB2,0x2F,0xFF,0x00,0x60,0x2A,0xA9,0x72,0x2B,0xC3,0xD2,0x2C,0xDB,0x42,0x2D,0xFA,0xE2,0x31,0xFF,0x00,0xF0,0x2A,0xAE,0x02,0x2C,0xCC,0xD2,0x2D,0xE9,0x52,0x2F,0x1B,0xF3,0x34,0xFF,0x00,0x00,0x2B,0xB2,0x62,0x2C,0xD5,0x12,0x2E,0xF4,0x02,0x31,0x4A,0xD3,0x37,0xFF,0x00,0x50,0x2B,0xB4,0x92,0x2C,0xDB,0x72,0x2E,0x08,0x03,0x33,0x6F,0x33,0x3A,0xFF,0x00,0x50,0x2B,0xB8,0x02,0x2D,0xE1,0x92,0x2F,0x20,0x93,0x35,0x9A,0x53,0x3D,0xFF,0x00,0xA0,0x2B,0xBA,0x52,0x2D,0xE7,0xA2,0x30,0x3B,0x83,0x37,0xBB,0x73,0x3F,0xFF,
0x00,0x30,0x2C,0xC1,0xF2,0x2D,0x00,0x03,0x33,0x6B,0x53,0x3B,0x01,0x34,0x44,0xFF,0x00,0xE0,0x2C,0xCF,0x82,0x2F,0x37,0x83,0x37,0xCB,0x43,0x42,0x7C,0xB4,0x4C,0xFF,0x00,0x90,0x2D,0xD9,0x82,0x31,0x70,0x23,0x3C,0x1F,0x74,0x48,0xEB,0x04,0x54,0xFF,0x00,0x40,0x2E,0xE0,0x02,0x34,0xA6,0x83,0x40,0x6F,0x04,0x4E,0x4C,0xA5,0x5A,0xFF,0x00,0xD0,0x2E,0xEE,0xB2,0x36,0xDC,0x93,0x44,0xB4,0x04,0x53,0xA7,0x95,0x60,0xFF,0x00,0x80,0x2F,0xFB,0x42,0x39,0x10,0x44,0x48,0xFA,0xC4,0x57,0xF8,0x45,0x66,0xFF,0x00,0xD0,0x31,0x1C,0x03,0x3E,0x6C,0x04,0x4F,0x70,0x35,0x60,0x8C,0x46,0x70,0xFF,0x00,0xB0,0x34,0x4C,0xC3,0x42,0xCE,0xF4,0x55,0xEC,0xE5,0x67,0x14,0x97,0x79,0xFF,0x00,0x50,0x37,0x77,0x03,0x47,0x1C,0x85,0x5B,0x52,0xC6,0x6E,0x90,0x27,0x82,0xFF,0x00,0xF0,0x39,0xA0,0xD3,0x4A,0x64,0x85,0x60,0xB0,0x46,0x75,0x05,0x78,0x8A,0xFF,0x00,0x80,0x3C,0xC8,0x83,0x4E,0xA8,0x85,0x65,0x06,0x87,0x7B,0x75,0x78,0x92,0xFF,0x00,0xD0,0x3E,0xEC,0xE3,0x51,0xE9,0x05,0x6A,0x58,0x47,0x81,0xE0,0x28,0x9A,0xFF,
0x00,0x30,0x41,0x13,0x14,0x55,0x27,0x66,0x6E,0xA8,0x07,0x87,0x4C,0xB9,0xA1,0xFF,0x00,0x40,0x42,0x24,0xA4,0x56,0x44,0x86,0x70,0xD0,0xC7,0x89,0x80,0x79,0xA5,0xFF,0x00,0x50,0x43,0x36,0x24,0x58,0x60,0x86,0x72,0xF4,0x87,0x8C,0xB4,0x39,0xA9,0xFF,0x00,0x80,0x44,0x48,0x94,0x59,0x7C,0x86,0x74,0x1C,0x48,0x8F,0xE6,0xF9,0xAC,0xFF,0x00,0x80,0x45,0x59,0x04,0x5B,0x96,0x86,0x76,0x40,0x08,0x92,0x18,0xBA,0xB0,0xFF,0x00,0x80,0x46,0x68,0x84,0x5C,0xB1,0x86,0x78,0x64,0x88,0x94,0x4C,0x7A,0xB4,0xFF,0x00,0xA0,0x47,0x79,0xF4,0x5D,0xCC,0x56,0x7A,0x86,0x18,0x97,0x80,0x3A,0xB8,0xFF,0x00,0x90,0x48,0x88,0x44,0x5F,0xE6,0x46,0x7C,0xA9,0xC8,0x99,0xB0,0xEA,0xBB,0xFF,0x00,0xA0,0x49,0x99,0xA4,0x60,0x02,0x47,0x7E,0xCD,0x68,0x9C,0xE6,0xBA,0xBF,0xFF,0x00,0x80,0x4A,0xA8,0x04,0x62,0x18,0x07,0x80,0xF0,0x18,0x9F,0x1A,0x9B,0xC3,0xFF,0x00,0x80,0x4B,0xB8,0x44,0x63,0x33,0xF7,0x81,0x17,0xF9,0xA1,0x4F,0x0B,0xC7,0xFF,0x00,0x80,0x4B,0xB8,0x44,0x63,0x33,0xF7,0x81,0x17,0xF9,0xA1,0x4F,0x0B,0xC7,0xFF,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x60,0x14,0x47,0xD1,0x14,0x52,0x51,0x15,0x57,0xA1,0x15,0x5E,0x11,0x16,0xFF,0x00,0xC0,0x28,0x8F,0xB2,0x29,0xA4,0xA2,0x2A,0xAE,0x42,0x2B,0xBC,0x22,0x2C,0xFF,0x00,0xD0,0x29,0x9E,0xC2,0x2A,0xB5,0xC2,0x2B,0xBF,0xA2,0x2C,0xCC,0x72,0x2D,0xFF,0x00,0x40,0x2A,0xA2,0x42,0x2B,0xBC,0xB2,0x2C,0xD4,0x22,0x2D,0xDB,0xB2,0x2F,0xFF,0x00,0x60,0x2A,0xA9,0x72,0x2B,0xC3,0xD2,0x2C,0xDB,0x42,0x2D,0xFA,0xE2,0x31,0xFF,0x00,0xF0,0x2A,0xAE,0x02,0x2C,0xCC,0xD2,0x2D,0xE9,0x52,0x2F,0x1B,0xF3,0x34,0xFF,0x00,0x00,0x2B,0xB2,0x62,0x2C,0xD5,0x12,0x2E,0xF4,0x02,0x31,0x4A,0xD3,0x37,0xFF,0x00,0x50,0x2B,0xB4,0x92,0x2C,0xDB,0x72,0x2E,0x08,0x03,0x33,0x6F,0x33,0x3A,0xFF,0x00,0x50,0x2B,0xB8,0x02,0x2D,0xE1,0x92,0x2F,0x20,0x93,0x35,0x9A,0x53,0x3D,0xFF,0x00,0xA0,0x2B,0xBA,0x52,0x2D,0xE7,0xA2,0x30,0x3B,0x83,0x37,0xBB,0x73,0x3F,0xFF,0x00,0x30,0x2C,0xC1,0xF2,0x2D,0x00,0x03,0x33,0x6B,0x53,0x3B,0x01,0x34,0x44,0xFF,
0x00,0xE0,0x2C,0xCF,0x82,0x2F,0x37,0x83,0x37,0xCB,0x43,0x42,0x7C,0xB4,0x4C,0xFF,0x00,0x90,0x2D,0xD9,0x82,0x31,0x70,0x23,0x3C,0x1F,0x74,0x48,0xEB,0x04,0x54,0xFF,0x00,0x40,0x2E,0xE0,0x02,0x34,0xA6,0x83,0x40,0x6F,0x04,0x4E,0x4C,0xA5,0x5A,0xFF,0x00,0xD0,0x2E,0xEE,0xB2,0x36,0xDC,0x93,0x44,0xB4,0x04,0x53,0xA7,0x95,0x60,0xFF,0x00,0x80,0x2F,0xFB,0x42,0x39,0x10,0x44,0x48,0xFA,0xC4,0x57,0xF8,0x45,0x66,0xFF,0x00,0xD0,0x31,0x1C,0x03,0x3E,0x6C,0x04,0x4F,0x70,0x35,0x60,0x8C,0x46,0x70,0xFF,0x00,0xB0,0x34,0x4C,0xC3,0x42,0xCE,0xF4,0x55,0xEC,0xE5,0x67,0x14,0x97,0x79,0xFF,0x00,0x50,0x37,0x77,0x03,0x47,0x1C,0x85,0x5B,0x52,0xC6,0x6E,0x90,0x27,0x82,0xFF,0x00,0xF0,0x39,0xA0,0xD3,0x4A,0x64,0x85,0x60,0xB0,0x46,0x75,0x05,0x78,0x8A,0xFF,0x00,0x80,0x3C,0xC8,0x83,0x4E,0xA8,0x85,0x65,0x06,0x87,0x7B,0x75,0x78,0x92,0xFF,0x00,0xD0,0x3E,0xEC,0xE3,0x51,0xE9,0x05,0x6A,0x58,0x47,0x81,0xE0,0x28,0x9A,0xFF,0x00,0x30,0x41,0x13,0x14,0x55,0x27,0x66,0x6E,0xA8,0x07,0x87,0x4C,0xB9,0xA1,0xFF,
0x00,0x40,0x42,0x24,0xA4,0x56,0x44,0x86,0x70,0xD0,0xC7,0x89,0x80,0x79,0xA5,0xFF,0x00,0x50,0x43,0x36,0x24,0x58,0x60,0x86,0x72,0xF4,0x87,0x8C,0xB4,0x39,0xA9,0xFF,0x00,0x80,0x44,0x48,0x94,0x59,0x7C,0x86,0x74,0x1C,0x48,0x8F,0xE6,0xF9,0xAC,0xFF,0x00,0x80,0x45,0x59,0x04,0x5B,0x96,0x86,0x76,0x40,0x08,0x92,0x18,0xBA,0xB0,0xFF
    },
{
0x00,0x80,0x46,0x68,0x84,0x5C,0xB1,0x86,0x78,0x64,0x88,0x94,0x4C,0x7A,0xB4,0xFF,0x00,0xA0,0x47,0x79,0xF4,0x5D,0xCC,0x56,0x7A,0x86,0x18,0x97,0x80,0x3A,0xB8,0xFF,0x00,0x90,0x48,0x88,0x44,0x5F,0xE6,0x46,0x7C,0xA9,0xC8,0x99,0xB0,0xEA,0xBB,0xFF,0x00,0xA0,0x49,0x99,0xA4,0x60,0x02,0x47,0x7E,0xCD,0x68,0x9C,0xE6,0xBA,0xBF,0xFF,0x00,0x80,0x4A,0xA8,0x04,0x62,0x18,0x07,0x80,0xF0,0x18,0x9F,0x1A,0x9B,0xC3,0xFF,0x00,0x80,0x4B,0xB8,0x44,0x63,0x33,0xF7,0x81,0x17,0xF9,0xA1,0x4F,0x0B,0xC7,0xFF,0x00,0x80,0x4B,0xB8,0x44,0x63,0x33,0xF7,0x81,0x17,0xF9,0xA1,0x4F,0x0B,0xC7,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x60,0x14,0x47,0xD1,0x14,0x52,0x51,0x15,0x57,0xA1,0x15,0x5E,0x11,0x16,0xFF,0x00,0xC0,0x28,0x8F,0xB2,0x29,0xA4,0xA2,0x2A,0xAE,0x42,0x2B,0xBC,0x22,0x2C,0xFF,0x00,0xD0,0x29,0x9E,0xC2,0x2A,0xB5,0xC2,0x2B,0xBF,0xA2,0x2C,0xCC,0x72,0x2D,0xFF,0x00,0x40,0x2A,0xA2,0x42,0x2B,0xBC,0xB2,0x2C,0xD4,0x22,0x2D,0xDB,0xB2,0x2F,0xFF,
0x00,0x60,0x2A,0xA9,0x72,0x2B,0xC3,0xD2,0x2C,0xDB,0x42,0x2D,0xFA,0xE2,0x31,0xFF,0x00,0xF0,0x2A,0xAE,0x02,0x2C,0xCC,0xD2,0x2D,0xE9,0x52,0x2F,0x1B,0xF3,0x34,0xFF,0x00,0x00,0x2B,0xB2,0x62,0x2C,0xD5,0x12,0x2E,0xF4,0x02,0x31,0x4A,0xD3,0x37,0xFF,0x00,0x50,0x2B,0xB4,0x92,0x2C,0xDB,0x72,0x2E,0x08,0x03,0x33,0x6F,0x33,0x3A,0xFF,0x00,0x50,0x2B,0xB8,0x02,0x2D,0xE1,0x92,0x2F,0x20,0x93,0x35,0x9A,0x53,0x3D,0xFF,0x00,0xA0,0x2B,0xBA,0x52,0x2D,0xE7,0xA2,0x30,0x3B,0x83,0x37,0xBB,0x73,0x3F,0xFF,0x00,0x30,0x2C,0xC1,0xF2,0x2D,0x00,0x03,0x33,0x6B,0x53,0x3B,0x01,0x34,0x44,0xFF,0x00,0xE0,0x2C,0xCF,0x82,0x2F,0x37,0x83,0x37,0xCB,0x43,0x42,0x7C,0xB4,0x4C,0xFF,0x00,0x90,0x2D,0xD9,0x82,0x31,0x70,0x23,0x3C,0x1F,0x74,0x48,0xEB,0x04,0x54,0xFF,0x00,0x40,0x2E,0xE0,0x02,0x34,0xA6,0x83,0x40,0x6F,0x04,0x4E,0x4C,0xA5,0x5A,0xFF,0x00,0xD0,0x2E,0xEE,0xB2,0x36,0xDC,0x93,0x44,0xB4,0x04,0x53,0xA7,0x95,0x60,0xFF,0x00,0x80,0x2F,0xFB,0x42,0x39,0x10,0x44,0x48,0xFA,0xC4,0x57,0xF8,0x45,0x66,0xFF,
0x00,0xD0,0x31,0x1C,0x03,0x3E,0x6C,0x04,0x4F,0x70,0x35,0x60,0x8C,0x46,0x70,0xFF,0x00,0xB0,0x34,0x4C,0xC3,0x42,0xCE,0xF4,0x55,0xEC,0xE5,0x67,0x14,0x97,0x79,0xFF,0x00,0x50,0x37,0x77,0x03,0x47,0x1C,0x85,0x5B,0x52,0xC6,0x6E,0x90,0x27,0x82,0xFF,0x00,0xF0,0x39,0xA0,0xD3,0x4A,0x64,0x85,0x60,0xB0,0x46,0x75,0x05,0x78,0x8A,0xFF,0x00,0x80,0x3C,0xC8,0x83,0x4E,0xA8,0x85,0x65,0x06,0x87,0x7B,0x75,0x78,0x92,0xFF,0x00,0xD0,0x3E,0xEC,0xE3,0x51,0xE9,0x05,0x6A,0x58,0x47,0x81,0xE0,0x28,0x9A,0xFF,0x00,0x30,0x41,0x13,0x14,0x55,0x27,0x66,0x6E,0xA8,0x07,0x87,0x4C,0xB9,0xA1,0xFF,0x00,0x40,0x42,0x24,0xA4,0x56,0x44,0x86,0x70,0xD0,0xC7,0x89,0x80,0x79,0xA5,0xFF,0x00,0x50,0x43,0x36,0x24,0x58,0x60,0x86,0x72,0xF4,0x87,0x8C,0xB4,0x39,0xA9,0xFF,0x00,0x80,0x44,0x48,0x94,0x59,0x7C,0x86,0x74,0x1C,0x48,0x8F,0xE6,0xF9,0xAC,0xFF,0x00,0x80,0x45,0x59,0x04,0x5B,0x96,0x86,0x76,0x40,0x08,0x92,0x18,0xBA,0xB0,0xFF,0x00,0x80,0x46,0x68,0x84,0x5C,0xB1,0x86,0x78,0x64,0x88,0x94,0x4C,0x7A,0xB4,0xFF,
0x00,0xA0,0x47,0x79,0xF4,0x5D,0xCC,0x56,0x7A,0x86,0x18,0x97,0x80,0x3A,0xB8,0xFF,0x00,0x90,0x48,0x88,0x44,0x5F,0xE6,0x46,0x7C,0xA9,0xC8,0x99,0xB0,0xEA,0xBB,0xFF,0x00,0xA0,0x49,0x99,0xA4,0x60,0x02,0x47,0x7E,0xCD,0x68,0x9C,0xE6,0xBA,0xBF,0xFF,0x00,0x80,0x4A,0xA8,0x04,0x62,0x18,0x07,0x80,0xF0,0x18,0x9F,0x1A,0x9B,0xC3,0xFF,0x00,0x80,0x4B,0xB8,0x44,0x63,0x33,0xF7,0x81,0x17,0xF9,0xA1,0x4F,0x0B,0xC7,0xFF,0x00,0x80,0x4B,0xB8,0x44,0x63,0x33,0xF7,0x81,0x17,0xF9,0xA1,0x4F,0x0B,0xC7,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x60,0x14,0x47,0xD1,0x14,0x52,0x51,0x15,0x57,0xA1,0x15,0x5E,0x11,0x16,0xFF,0x00,0xC0,0x28,0x8F,0xB2,0x29,0xA4,0xA2,0x2A,0xAE,0x42,0x2B,0xBC,0x22,0x2C,0xFF,0x00,0xD0,0x29,0x9E,0xC2,0x2A,0xB5,0xC2,0x2B,0xBF,0xA2,0x2C,0xCC,0x72,0x2D,0xFF,0x00,0x40,0x2A,0xA2,0x42,0x2B,0xBC,0xB2,0x2C,0xD4,0x22,0x2D,0xDB,0xB2,0x2F,0xFF,0x00,0x60,0x2A,0xA9,0x72,0x2B,0xC3,0xD2,0x2C,0xDB,0x42,0x2D,0xFA,0xE2,0x31,0xFF,
0x00,0xF0,0x2A,0xAE,0x02,0x2C,0xCC,0xD2,0x2D,0xE9,0x52,0x2F,0x1B,0xF3,0x34,0xFF,0x00,0x00,0x2B,0xB2,0x62,0x2C,0xD5,0x12,0x2E,0xF4,0x02,0x31,0x4A,0xD3,0x37,0xFF,0x00,0x50,0x2B,0xB4,0x92,0x2C,0xDB,0x72,0x2E,0x08,0x03,0x33,0x6F,0x33,0x3A,0xFF,0x00,0x50,0x2B,0xB8,0x02,0x2D,0xE1,0x92,0x2F,0x20,0x93,0x35,0x9A,0x53,0x3D,0xFF,0x00,0xA0,0x2B,0xBA,0x52,0x2D,0xE7,0xA2,0x30,0x3B,0x83,0x37,0xBB,0x73,0x3F,0xFF,0x00,0x30,0x2C,0xC1,0xF2,0x2D,0x00,0x03,0x33,0x6B,0x53,0x3B,0x01,0x34,0x44,0xFF,0x00,0xE0,0x2C,0xCF,0x82,0x2F,0x37,0x83,0x37,0xCB,0x43,0x42,0x7C,0xB4,0x4C,0xFF,0x00,0x90,0x2D,0xD9,0x82,0x31,0x70,0x23,0x3C,0x1F,0x74,0x48,0xEB,0x04,0x54,0xFF,0x00,0x40,0x2E,0xE0,0x02,0x34,0xA6,0x83,0x40,0x6F,0x04,0x4E,0x4C,0xA5,0x5A,0xFF,0x00,0xD0,0x2E,0xEE,0xB2,0x36,0xDC,0x93,0x44,0xB4,0x04,0x53,0xA7,0x95,0x60,0xFF,0x00,0x80,0x2F,0xFB,0x42,0x39,0x10,0x44,0x48,0xFA,0xC4,0x57,0xF8,0x45,0x66,0xFF,0x00,0xD0,0x31,0x1C,0x03,0x3E,0x6C,0x04,0x4F,0x70,0x35,0x60,0x8C,0x46,0x70,0xFF,
0x00,0xB0,0x34,0x4C,0xC3,0x42,0xCE,0xF4,0x55,0xEC,0xE5,0x67,0x14,0x97,0x79,0xFF,0x00,0x50,0x37,0x77,0x03,0x47,0x1C,0x85,0x5B,0x52,0xC6,0x6E,0x90,0x27,0x82,0xFF,0x00,0xF0,0x39,0xA0,0xD3,0x4A,0x64,0x85,0x60,0xB0,0x46,0x75,0x05,0x78,0x8A,0xFF,0x00,0x80,0x3C,0xC8,0x83,0x4E,0xA8,0x85,0x65,0x06,0x87,0x7B,0x75,0x78,0x92,0xFF},
{0x00,0xD0,0x3E,0xEC,0xE3,0x51,0xE9,0x05,0x6A,0x58,0x47,0x81,0xE0,0x28,0x9A,0xFF,0x00,0x30,0x41,0x13,0x14,0x55,0x27,0x66,0x6E,0xA8,0x07,0x87,0x4C,0xB9,0xA1,0xFF,0x00,0x40,0x42,0x24,0xA4,0x56,0x44,0x86,0x70,0xD0,0xC7,0x89,0x80,0x79,0xA5,0xFF,0x00,0x50,0x43,0x36,0x24,0x58,0x60,0x86,0x72,0xF4,0x87,0x8C,0xB4,0x39,0xA9,0xFF,0x00,0x80,0x44,0x48,0x94,0x59,0x7C,0x86,0x74,0x1C,0x48,0x8F,0xE6,0xF9,0xAC,0xFF,0x00,0x80,0x45,0x59,0x04,0x5B,0x96,0x86,0x76,0x40,0x08,0x92,0x18,0xBA,0xB0,0xFF,0x00,0x80,0x46,0x68,0x84,0x5C,0xB1,0x86,0x78,0x64,0x88,0x94,0x4C,0x7A,0xB4,0xFF,0x00,0xA0,0x47,0x79,0xF4,0x5D,0xCC,0x56,0x7A,0x86,0x18,0x97,0x80,0x3A,0xB8,0xFF,0x00,0x90,0x48,0x88,0x44,0x5F,0xE6,0x46,0x7C,0xA9,0xC8,0x99,0xB0,0xEA,0xBB,0xFF,0x00,0xA0,0x49,0x99,0xA4,0x60,0x02,0x47,0x7E,0xCD,0x68,0x9C,0xE6,0xBA,0xBF,0xFF,0x00,0x80,0x4A,0xA8,0x04,0x62,0x18,0x07,0x80,0xF0,0x18,0x9F,0x1A,0x9B,0xC3,0xFF,0x00,0x80,0x4B,0xB8,0x44,0x63,0x33,0xF7,0x81,0x17,0xF9,0xA1,0x4F,0x0B,0xC7,0xFF,
0x00,0x80,0x4B,0xB8,0x44,0x63,0x33,0xF7,0x81,0x17,0xF9,0xA1,0x4F,0x0B,0xC7,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x60,0x14,0x47,0xD1,0x14,0x52,0x51,0x15,0x57,0xA1,0x15,0x5E,0x11,0x16,0xFF,0x00,0xC0,0x28,0x8F,0xB2,0x29,0xA4,0xA2,0x2A,0xAE,0x42,0x2B,0xBC,0x22,0x2C,0xFF,0x00,0xD0,0x29,0x9E,0xC2,0x2A,0xB5,0xC2,0x2B,0xBF,0xA2,0x2C,0xCC,0x72,0x2D,0xFF,0x00,0x40,0x2A,0xA2,0x42,0x2B,0xBC,0xB2,0x2C,0xD4,0x22,0x2D,0xDB,0xB2,0x2F,0xFF,0x00,0x60,0x2A,0xA9,0x72,0x2B,0xC3,0xD2,0x2C,0xDB,0x42,0x2D,0xFA,0xE2,0x31,0xFF,0x00,0xF0,0x2A,0xAE,0x02,0x2C,0xCC,0xD2,0x2D,0xE9,0x52,0x2F,0x1B,0xF3,0x34,0xFF,0x00,0x00,0x2B,0xB2,0x62,0x2C,0xD5,0x12,0x2E,0xF4,0x02,0x31,0x4A,0xD3,0x37,0xFF,0x00,0x50,0x2B,0xB4,0x92,0x2C,0xDB,0x72,0x2E,0x08,0x03,0x33,0x6F,0x33,0x3A,0xFF,0x00,0x50,0x2B,0xB8,0x02,0x2D,0xE1,0x92,0x2F,0x20,0x93,0x35,0x9A,0x53,0x3D,0xFF,0x00,0xA0,0x2B,0xBA,0x52,0x2D,0xE7,0xA2,0x30,0x3B,0x83,0x37,0xBB,0x73,0x3F,0xFF,
0x00,0x30,0x2C,0xC1,0xF2,0x2D,0x00,0x03,0x33,0x6B,0x53,0x3B,0x01,0x34,0x44,0xFF,0x00,0xE0,0x2C,0xCF,0x82,0x2F,0x37,0x83,0x37,0xCB,0x43,0x42,0x7C,0xB4,0x4C,0xFF,0x00,0x90,0x2D,0xD9,0x82,0x31,0x70,0x23,0x3C,0x1F,0x74,0x48,0xEB,0x04,0x54,0xFF,0x00,0x40,0x2E,0xE0,0x02,0x34,0xA6,0x83,0x40,0x6F,0x04,0x4E,0x4C,0xA5,0x5A,0xFF,0x00,0xD0,0x2E,0xEE,0xB2,0x36,0xDC,0x93,0x44,0xB4,0x04,0x53,0xA7,0x95,0x60,0xFF,0x00,0x80,0x2F,0xFB,0x42,0x39,0x10,0x44,0x48,0xFA,0xC4,0x57,0xF8,0x45,0x66,0xFF,0x00,0xD0,0x31,0x1C,0x03,0x3E,0x6C,0x04,0x4F,0x70,0x35,0x60,0x8C,0x46,0x70,0xFF,0x00,0xB0,0x34,0x4C,0xC3,0x42,0xCE,0xF4,0x55,0xEC,0xE5,0x67,0x14,0x97,0x79,0xFF,0x00,0x50,0x37,0x77,0x03,0x47,0x1C,0x85,0x5B,0x52,0xC6,0x6E,0x90,0x27,0x82,0xFF,0x00,0xF0,0x39,0xA0,0xD3,0x4A,0x64,0x85,0x60,0xB0,0x46,0x75,0x05,0x78,0x8A,0xFF,0x00,0x80,0x3C,0xC8,0x83,0x4E,0xA8,0x85,0x65,0x06,0x87,0x7B,0x75,0x78,0x92,0xFF,0x00,0xD0,0x3E,0xEC,0xE3,0x51,0xE9,0x05,0x6A,0x58,0x47,0x81,0xE0,0x28,0x9A,0xFF,
0x00,0x30,0x41,0x13,0x14,0x55,0x27,0x66,0x6E,0xA8,0x07,0x87,0x4C,0xB9,0xA1,0xFF,0x00,0x40,0x42,0x24,0xA4,0x56,0x44,0x86,0x70,0xD0,0xC7,0x89,0x80,0x79,0xA5,0xFF,0x00,0x50,0x43,0x36,0x24,0x58,0x60,0x86,0x72,0xF4,0x87,0x8C,0xB4,0x39,0xA9,0xFF,0x00,0x80,0x44,0x48,0x94,0x59,0x7C,0x86,0x74,0x1C,0x48,0x8F,0xE6,0xF9,0xAC,0xFF,0x00,0x80,0x45,0x59,0x04,0x5B,0x96,0x86,0x76,0x40,0x08,0x92,0x18,0xBA,0xB0,0xFF,0x00,0x80,0x46,0x68,0x84,0x5C,0xB1,0x86,0x78,0x64,0x88,0x94,0x4C,0x7A,0xB4,0xFF,0x00,0xA0,0x47,0x79,0xF4,0x5D,0xCC,0x56,0x7A,0x86,0x18,0x97,0x80,0x3A,0xB8,0xFF,0x00,0x90,0x48,0x88,0x44,0x5F,0xE6,0x46,0x7C,0xA9,0xC8,0x99,0xB0,0xEA,0xBB,0xFF,0x00,0xA0,0x49,0x99,0xA4,0x60,0x02,0x47,0x7E,0xCD,0x68,0x9C,0xE6,0xBA,0xBF,0xFF,0x00,0x80,0x4A,0xA8,0x04,0x62,0x18,0x07,0x80,0xF0,0x18,0x9F,0x1A,0x9B,0xC3,0xFF,0x00,0x80,0x4B,0xB8,0x44,0x63,0x33,0xF7,0x81,0x17,0xF9,0xA1,0x4F,0x0B,0xC7,0xFF,0x00,0x80,0x4B,0xB8,0x44,0x63,0x33,0xF7,0x81,0x17,0xF9,0xA1,0x4F,0x0B,0xC7,0xFF,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x20,0x16,0x5F,0x91,0x16,0x71,0x31,0x17,0x78,0xD1,0x17,0x85,0x91,0x18,0xFF,0x00,0x40,0x2C,0xBE,0x22,0x2D,0xE3,0x72,0x2E,0xF1,0xB2,0x2F,0x0A,0x23,0x31,0xFF,0x00,0x80,0x2D,0xD0,0x72,0x2E,0xF8,0xD2,0x2F,0x07,0xB3,0x31,0x25,0x03,0x34,0xFF,0x00,0x00,0x2E,0xD5,0x02,0x2F,0xFC,0x62,0x31,0x22,0x03,0x33,0x4D,0x53,0x37,0xFF,0x00,0x20,0x2E,0xE4,0xA2,0x2F,0x11,0x13,0x32,0x44,0x73,0x35,0x95,0xE3,0x3B,0xFF,0x00,0xE0,0x2E,0xE8,0x62,0x30,0x1A,0xA3,0x33,0x57,0x03,0x38,0xB8,0x73,0x3F,0xFF,0x00,0x00,0x2F,0xEC,0xC2,0x30,0x25,0xB3,0x34,0x72,0xA3,0x3A,0xF7,0x73,0x43,0xFF,0x00,0x80,0x2F,0xF5,0x52,0x31,0x3B,0xC3,0x35,0x94,0xB3,0x3D,0x2E,0xD4,0x46,0xFF,0x00,0xA0,0x2F,0xFC,0x12,0x32,0x49,0x83,0x37,0xAE,0xC3,0x40,0x5F,0x54,0x4A,0xFF,0x00,0xF0,0x2F,0xFE,0xA2,0x32,0x5A,0x73,0x39,0xD7,0xB3,0x42,0x7F,0x84,0x4C,0xFF,0x00,0xB0,0x30,0x0A,0x73,0x34,0x87,0x63,0x3D,0x21,0x94,0x47,0xD4,0x54,0x52,0xFF,
0x00,0x80,0x31,0x19,0xB3,0x37,0xD4,0xA3,0x43,0x9F,0x04,0x50,0x6F,0x85,0x5C,0xFF,0x00,0x30,0x33,0x34,0x13,0x3B,0x24,0xC4,0x49,0x0B,0x95,0x57,0xF3,0x85,0x65,0xFF,0x00,0xC0,0x34,0x4A,0xF3,0x3E,0x6F,0x54,0x4E,0x6D,0x45,0x5E,0x65,0x36,0x6D,0xFF,0x00,0x50,0x36,0x64,0x43,0x42,0xB9,0xD4,0x53,0xC8,0x35,0x64,0xCF,0x46,0x74,0xFF},
{0x00,0x40,0x38,0x82,0x93,0x45,0xF9,0xB4,0x58,0x19,0xC6,0x69,0x30,0xC7,0x7A,0xFF,0x00,0xD0,0x3B,0xBC,0xE3,0x4B,0x6E,0xA5,0x60,0xA2,0xC6,0x73,0xDC,0x77,0x86,0xFF,0x00,0xD0,0x3E,0xF2,0xD3,0x50,0xCE,0xB5,0x67,0x24,0x87,0x7C,0x78,0x08,0x91,0xFF,0x00,0x90,0x42,0x28,0xF4,0x55,0x2E,0x46,0x6E,0x9A,0xB7,0x84,0x03,0xC9,0x9A,0xFF,0x00,0xC0,0x45,0x5C,0x94,0x5A,0x83,0x46,0x74,0x04,0x08,0x8C,0x8C,0x49,0xA4,0xFF,0x00,0x00,0x49,0x90,0x04,0x5F,0xD1,0xF6,0x79,0x69,0x48,0x93,0x0C,0x6A,0xAD,0xFF,0x00,0xD0,0x4B,0xBE,0x14,0x63,0x1E,0x47,0x7F,0xC8,0x08,0x9A,0x8C,0x1A,0xB6,0xFF,0x00,0xF0,0x4E,0xEF,0x94,0x66,0x65,0x47,0x84,0x23,0x79,0xA0,0x06,0xBB,0xBE,0xFF,0x00,0x40,0x50,0x04,0xA5,0x68,0x87,0xA7,0x86,0x4F,0xB9,0xA3,0x40,0x1B,0xC3,0xFF,0x00,0x90,0x51,0x1A,0x45,0x6A,0xA8,0x07,0x89,0x78,0xD9,0xA6,0x7A,0xFB,0xC6,0xFF,0x00,0xF0,0x52,0x2E,0x15,0x6C,0xC9,0x27,0x8B,0xA5,0x09,0xAA,0xB4,0x9B,0xCB,0xFF,0x00,0x20,0x54,0x40,0xB5,0x6D,0xE9,0x67,0x8D,0xD3,0xE9,0xAC,0xEC,0xEB,0xCF,0xFF,
0x00,0x70,0x55,0x54,0x85,0x6F,0x09,0xD8,0x8F,0xFC,0xD9,0xAF,0x2A,0x0C,0xD4,0xFF,0x00,0x80,0x56,0x69,0x35,0x71,0x28,0x08,0x92,0x23,0xDA,0xB2,0x65,0x5C,0xD8,0xFF,0x00,0xE0,0x57,0x7C,0xC5,0x72,0x44,0x28,0x94,0x4D,0xCA,0xB5,0x9F,0xAC,0xDC,0xFF,0x00,0x00,0x59,0x90,0x55,0x74,0x64,0x68,0x96,0x77,0xCA,0xB8,0xD6,0xBC,0xE0,0xFF,0x00,0x30,0x5A,0xA3,0xF5,0x75,0x80,0x68,0x98,0x9C,0x9A,0xBB,0x11,0x3D,0xE5,0xFF,0x00,0x70,0x5B,0xB5,0x55,0x77,0x99,0x78,0x9A,0xC4,0xFA,0xBE,0x4E,0x5D,0xE9,0xFF,0x00,0x70,0x5B,0xB5,0x55,0x77,0x99,0x78,0x9A,0xC4,0xFA,0xBE,0x4E,0x5D,0xE9,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x20,0x16,0x5F,0x91,0x16,0x71,0x31,0x17,0x78,0xD1,0x17,0x85,0x91,0x18,0xFF,0x00,0x40,0x2C,0xBE,0x22,0x2D,0xE3,0x72,0x2E,0xF1,0xB2,0x2F,0x0A,0x23,0x31,0xFF,0x00,0x80,0x2D,0xD0,0x72,0x2E,0xF8,0xD2,0x2F,0x07,0xB3,0x31,0x25,0x03,0x34,0xFF,0x00,0x00,0x2E,0xD5,0x02,0x2F,0xFC,0x62,0x31,0x22,0x03,0x33,0x4D,0x53,0x37,0xFF,
0x00,0x20,0x2E,0xE4,0xA2,0x2F,0x11,0x13,0x32,0x44,0x73,0x35,0x95,0xE3,0x3B,0xFF,0x00,0xE0,0x2E,0xE8,0x62,0x30,0x1A,0xA3,0x33,0x57,0x03,0x38,0xB8,0x73,0x3F,0xFF,0x00,0x00,0x2F,0xEC,0xC2,0x30,0x25,0xB3,0x34,0x72,0xA3,0x3A,0xF7,0x73,0x43,0xFF,0x00,0x80,0x2F,0xF5,0x52,0x31,0x3B,0xC3,0x35,0x94,0xB3,0x3D,0x2E,0xD4,0x46,0xFF,0x00,0xA0,0x2F,0xFC,0x12,0x32,0x49,0x83,0x37,0xAE,0xC3,0x40,0x5F,0x54,0x4A,0xFF,0x00,0xF0,0x2F,0xFE,0xA2,0x32,0x5A,0x73,0x39,0xD7,0xB3,0x42,0x7F,0x84,0x4C,0xFF,0x00,0xB0,0x30,0x0A,0x73,0x34,0x87,0x63,0x3D,0x21,0x94,0x47,0xD4,0x54,0x52,0xFF,0x00,0x80,0x31,0x19,0xB3,0x37,0xD4,0xA3,0x43,0x9F,0x04,0x50,0x6F,0x85,0x5C,0xFF,0x00,0x30,0x33,0x34,0x13,0x3B,0x24,0xC4,0x49,0x0B,0x95,0x57,0xF3,0x85,0x65,0xFF,0x00,0xC0,0x34,0x4A,0xF3,0x3E,0x6F,0x54,0x4E,0x6D,0x45,0x5E,0x65,0x36,0x6D,0xFF,0x00,0x50,0x36,0x64,0x43,0x42,0xB9,0xD4,0x53,0xC8,0x35,0x64,0xCF,0x46,0x74,0xFF,0x00,0x40,0x38,0x82,0x93,0x45,0xF9,0xB4,0x58,0x19,0xC6,0x69,0x30,0xC7,0x7A,0xFF,
0x00,0xD0,0x3B,0xBC,0xE3,0x4B,0x6E,0xA5,0x60,0xA2,0xC6,0x73,0xDC,0x77,0x86,0xFF,0x00,0xD0,0x3E,0xF2,0xD3,0x50,0xCE,0xB5,0x67,0x24,0x87,0x7C,0x78,0x08,0x91,0xFF,0x00,0x90,0x42,0x28,0xF4,0x55,0x2E,0x46,0x6E,0x9A,0xB7,0x84,0x03,0xC9,0x9A,0xFF,0x00,0xC0,0x45,0x5C,0x94,0x5A,0x83,0x46,0x74,0x04,0x08,0x8C,0x8C,0x49,0xA4,0xFF,0x00,0x00,0x49,0x90,0x04,0x5F,0xD1,0xF6,0x79,0x69,0x48,0x93,0x0C,0x6A,0xAD,0xFF,0x00,0xD0,0x4B,0xBE,0x14,0x63,0x1E,0x47,0x7F,0xC8,0x08,0x9A,0x8C,0x1A,0xB6,0xFF,0x00,0xF0,0x4E,0xEF,0x94,0x66,0x65,0x47,0x84,0x23,0x79,0xA0,0x06,0xBB,0xBE,0xFF,0x00,0x40,0x50,0x04,0xA5,0x68,0x87,0xA7,0x86,0x4F,0xB9,0xA3,0x40,0x1B,0xC3,0xFF,0x00,0x90,0x51,0x1A,0x45,0x6A,0xA8,0x07,0x89,0x78,0xD9,0xA6,0x7A,0xFB,0xC6,0xFF,0x00,0xF0,0x52,0x2E,0x15,0x6C,0xC9,0x27,0x8B,0xA5,0x09,0xAA,0xB4,0x9B,0xCB,0xFF,0x00,0x20,0x54,0x40,0xB5,0x6D,0xE9,0x67,0x8D,0xD3,0xE9,0xAC,0xEC,0xEB,0xCF,0xFF,0x00,0x70,0x55,0x54,0x85,0x6F,0x09,0xD8,0x8F,0xFC,0xD9,0xAF,0x2A,0x0C,0xD4,0xFF,
0x00,0x80,0x56,0x69,0x35,0x71,0x28,0x08,0x92,0x23,0xDA,0xB2,0x65,0x5C,0xD8,0xFF,0x00,0xE0,0x57,0x7C,0xC5,0x72,0x44,0x28,0x94,0x4D,0xCA,0xB5,0x9F,0xAC,0xDC,0xFF,0x00,0x00,0x59,0x90,0x55,0x74,0x64,0x68,0x96,0x77,0xCA,0xB8,0xD6,0xBC,0xE0,0xFF,0x00,0x30,0x5A,0xA3,0xF5,0x75,0x80,0x68,0x98,0x9C,0x9A,0xBB,0x11,0x3D,0xE5,0xFF,0x00,0x70,0x5B,0xB5,0x55,0x77,0x99,0x78,0x9A,0xC4,0xFA,0xBE,0x4E,0x5D,0xE9,0xFF,0x00,0x70,0x5B,0xB5,0x55,0x77,0x99,0x78,0x9A,0xC4,0xFA,0xBE,0x4E,0x5D,0xE9,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x20,0x16,0x5F,0x91,0x16,0x71,0x31,0x17,0x78,0xD1,0x17,0x85,0x91,0x18,0xFF,0x00,0x40,0x2C,0xBE,0x22,0x2D,0xE3,0x72,0x2E,0xF1,0xB2,0x2F,0x0A,0x23,0x31,0xFF,0x00,0x80,0x2D,0xD0,0x72,0x2E,0xF8,0xD2,0x2F,0x07,0xB3,0x31,0x25,0x03,0x34,0xFF,0x00,0x00,0x2E,0xD5,0x02,0x2F,0xFC,0x62,0x31,0x22,0x03,0x33,0x4D,0x53,0x37,0xFF,0x00,0x20,0x2E,0xE4,0xA2,0x2F,0x11,0x13,0x32,0x44,0x73,0x35,0x95,0xE3,0x3B,0xFF,
0x00,0xE0,0x2E,0xE8,0x62,0x30,0x1A,0xA3,0x33,0x57,0x03,0x38,0xB8,0x73,0x3F,0xFF,0x00,0x00,0x2F,0xEC,0xC2,0x30,0x25,0xB3,0x34,0x72,0xA3,0x3A,0xF7,0x73,0x43,0xFF,0x00,0x80,0x2F,0xF5,0x52,0x31,0x3B,0xC3,0x35,0x94,0xB3,0x3D,0x2E,0xD4,0x46,0xFF,0x00,0xA0,0x2F,0xFC,0x12,0x32,0x49,0x83,0x37,0xAE,0xC3,0x40,0x5F,0x54,0x4A,0xFF},
{0x00,0xF0,0x2F,0xFE,0xA2,0x32,0x5A,0x73,0x39,0xD7,0xB3,0x42,0x7F,0x84,0x4C,0xFF,0x00,0xB0,0x30,0x0A,0x73,0x34,0x87,0x63,0x3D,0x21,0x94,0x47,0xD4,0x54,0x52,0xFF,0x00,0x80,0x31,0x19,0xB3,0x37,0xD4,0xA3,0x43,0x9F,0x04,0x50,0x6F,0x85,0x5C,0xFF,0x00,0x30,0x33,0x34,0x13,0x3B,0x24,0xC4,0x49,0x0B,0x95,0x57,0xF3,0x85,0x65,0xFF,0x00,0xC0,0x34,0x4A,0xF3,0x3E,0x6F,0x54,0x4E,0x6D,0x45,0x5E,0x65,0x36,0x6D,0xFF,0x00,0x50,0x36,0x64,0x43,0x42,0xB9,0xD4,0x53,0xC8,0x35,0x64,0xCF,0x46,0x74,0xFF,0x00,0x40,0x38,0x82,0x93,0x45,0xF9,0xB4,0x58,0x19,0xC6,0x69,0x30,0xC7,0x7A,0xFF,0x00,0xD0,0x3B,0xBC,0xE3,0x4B,0x6E,0xA5,0x60,0xA2,0xC6,0x73,0xDC,0x77,0x86,0xFF,0x00,0xD0,0x3E,0xF2,0xD3,0x50,0xCE,0xB5,0x67,0x24,0x87,0x7C,0x78,0x08,0x91,0xFF,0x00,0x90,0x42,0x28,0xF4,0x55,0x2E,0x46,0x6E,0x9A,0xB7,0x84,0x03,0xC9,0x9A,0xFF,0x00,0xC0,0x45,0x5C,0x94,0x5A,0x83,0x46,0x74,0x04,0x08,0x8C,0x8C,0x49,0xA4,0xFF,0x00,0x00,0x49,0x90,0x04,0x5F,0xD1,0xF6,0x79,0x69,0x48,0x93,0x0C,0x6A,0xAD,0xFF,
0x00,0xD0,0x4B,0xBE,0x14,0x63,0x1E,0x47,0x7F,0xC8,0x08,0x9A,0x8C,0x1A,0xB6,0xFF,0x00,0xF0,0x4E,0xEF,0x94,0x66,0x65,0x47,0x84,0x23,0x79,0xA0,0x06,0xBB,0xBE,0xFF,0x00,0x40,0x50,0x04,0xA5,0x68,0x87,0xA7,0x86,0x4F,0xB9,0xA3,0x40,0x1B,0xC3,0xFF,0x00,0x90,0x51,0x1A,0x45,0x6A,0xA8,0x07,0x89,0x78,0xD9,0xA6,0x7A,0xFB,0xC6,0xFF,0x00,0xF0,0x52,0x2E,0x15,0x6C,0xC9,0x27,0x8B,0xA5,0x09,0xAA,0xB4,0x9B,0xCB,0xFF,0x00,0x20,0x54,0x40,0xB5,0x6D,0xE9,0x67,0x8D,0xD3,0xE9,0xAC,0xEC,0xEB,0xCF,0xFF,0x00,0x70,0x55,0x54,0x85,0x6F,0x09,0xD8,0x8F,0xFC,0xD9,0xAF,0x2A,0x0C,0xD4,0xFF,0x00,0x80,0x56,0x69,0x35,0x71,0x28,0x08,0x92,0x23,0xDA,0xB2,0x65,0x5C,0xD8,0xFF,0x00,0xE0,0x57,0x7C,0xC5,0x72,0x44,0x28,0x94,0x4D,0xCA,0xB5,0x9F,0xAC,0xDC,0xFF,0x00,0x00,0x59,0x90,0x55,0x74,0x64,0x68,0x96,0x77,0xCA,0xB8,0xD6,0xBC,0xE0,0xFF,0x00,0x30,0x5A,0xA3,0xF5,0x75,0x80,0x68,0x98,0x9C,0x9A,0xBB,0x11,0x3D,0xE5,0xFF,0x00,0x70,0x5B,0xB5,0x55,0x77,0x99,0x78,0x9A,0xC4,0xFA,0xBE,0x4E,0x5D,0xE9,0xFF,
0x00,0x70,0x5B,0xB5,0x55,0x77,0x99,0x78,0x9A,0xC4,0xFA,0xBE,0x4E,0x5D,0xE9,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x20,0x16,0x5F,0x91,0x16,0x71,0x31,0x17,0x78,0xD1,0x17,0x85,0x91,0x18,0xFF,0x00,0x40,0x2C,0xBE,0x22,0x2D,0xE3,0x72,0x2E,0xF1,0xB2,0x2F,0x0A,0x23,0x31,0xFF,0x00,0x80,0x2D,0xD0,0x72,0x2E,0xF8,0xD2,0x2F,0x07,0xB3,0x31,0x25,0x03,0x34,0xFF,0x00,0x00,0x2E,0xD5,0x02,0x2F,0xFC,0x62,0x31,0x22,0x03,0x33,0x4D,0x53,0x37,0xFF,0x00,0x20,0x2E,0xE4,0xA2,0x2F,0x11,0x13,0x32,0x44,0x73,0x35,0x95,0xE3,0x3B,0xFF,0x00,0xE0,0x2E,0xE8,0x62,0x30,0x1A,0xA3,0x33,0x57,0x03,0x38,0xB8,0x73,0x3F,0xFF,0x00,0x00,0x2F,0xEC,0xC2,0x30,0x25,0xB3,0x34,0x72,0xA3,0x3A,0xF7,0x73,0x43,0xFF,0x00,0x80,0x2F,0xF5,0x52,0x31,0x3B,0xC3,0x35,0x94,0xB3,0x3D,0x2E,0xD4,0x46,0xFF,0x00,0xA0,0x2F,0xFC,0x12,0x32,0x49,0x83,0x37,0xAE,0xC3,0x40,0x5F,0x54,0x4A,0xFF,0x00,0xF0,0x2F,0xFE,0xA2,0x32,0x5A,0x73,0x39,0xD7,0xB3,0x42,0x7F,0x84,0x4C,0xFF,
0x00,0xB0,0x30,0x0A,0x73,0x34,0x87,0x63,0x3D,0x21,0x94,0x47,0xD4,0x54,0x52,0xFF,0x00,0x80,0x31,0x19,0xB3,0x37,0xD4,0xA3,0x43,0x9F,0x04,0x50,0x6F,0x85,0x5C,0xFF,0x00,0x30,0x33,0x34,0x13,0x3B,0x24,0xC4,0x49,0x0B,0x95,0x57,0xF3,0x85,0x65,0xFF,0x00,0xC0,0x34,0x4A,0xF3,0x3E,0x6F,0x54,0x4E,0x6D,0x45,0x5E,0x65,0x36,0x6D,0xFF,0x00,0x50,0x36,0x64,0x43,0x42,0xB9,0xD4,0x53,0xC8,0x35,0x64,0xCF,0x46,0x74,0xFF,0x00,0x40,0x38,0x82,0x93,0x45,0xF9,0xB4,0x58,0x19,0xC6,0x69,0x30,0xC7,0x7A,0xFF,0x00,0xD0,0x3B,0xBC,0xE3,0x4B,0x6E,0xA5,0x60,0xA2,0xC6,0x73,0xDC,0x77,0x86,0xFF,0x00,0xD0,0x3E,0xF2,0xD3,0x50,0xCE,0xB5,0x67,0x24,0x87,0x7C,0x78,0x08,0x91,0xFF,0x00,0x90,0x42,0x28,0xF4,0x55,0x2E,0x46,0x6E,0x9A,0xB7,0x84,0x03,0xC9,0x9A,0xFF,0x00,0xC0,0x45,0x5C,0x94,0x5A,0x83,0x46,0x74,0x04,0x08,0x8C,0x8C,0x49,0xA4,0xFF,0x00,0x00,0x49,0x90,0x04,0x5F,0xD1,0xF6,0x79,0x69,0x48,0x93,0x0C,0x6A,0xAD,0xFF,0x00,0xD0,0x4B,0xBE,0x14,0x63,0x1E,0x47,0x7F,0xC8,0x08,0x9A,0x8C,0x1A,0xB6,0xFF,
0x00,0xF0,0x4E,0xEF,0x94,0x66,0x65,0x47,0x84,0x23,0x79,0xA0,0x06,0xBB,0xBE,0xFF,0x00,0x40,0x50,0x04,0xA5,0x68,0x87,0xA7,0x86,0x4F,0xB9,0xA3,0x40,0x1B,0xC3,0xFF,0x00,0x90,0x51,0x1A,0x45,0x6A,0xA8,0x07,0x89,0x78,0xD9,0xA6,0x7A,0xFB,0xC6,0xFF,0x00,0xF0,0x52,0x2E,0x15,0x6C,0xC9,0x27,0x8B,0xA5,0x09,0xAA,0xB4,0x9B,0xCB,0xFF,0x00,0x20,0x54,0x40,0xB5,0x6D,0xE9,0x67,0x8D,0xD3,0xE9,0xAC,0xEC,0xEB,0xCF,0xFF,0x00,0x70,0x55,0x54,0x85,0x6F,0x09,0xD8,0x8F,0xFC,0xD9,0xAF,0x2A,0x0C,0xD4,0xFF,0x00,0x80,0x56,0x69,0x35,0x71,0x28,0x08,0x92,0x23,0xDA,0xB2,0x65,0x5C,0xD8,0xFF,0x00,0xE0,0x57,0x7C,0xC5,0x72,0x44,0x28,0x94,0x4D,0xCA,0xB5,0x9F,0xAC,0xDC,0xFF,0x00,0x00,0x59,0x90,0x55,0x74,0x64,0x68,0x96,0x77,0xCA,0xB8,0xD6,0xBC,0xE0,0xFF,0x00,0x30,0x5A,0xA3,0xF5,0x75,0x80,0x68,0x98,0x9C,0x9A,0xBB,0x11,0x3D,0xE5,0xFF,0x00,0x70,0x5B,0xB5,0x55,0x77,0x99,0x78,0x9A,0xC4,0xFA,0xBE,0x4E,0x5D,0xE9,0xFF,0x00,0x70,0x5B,0xB5,0x55,0x77,0x99,0x78,0x9A,0xC4,0xFA,0xBE,0x4E,0x5D,0xE9,0xFF,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x20,0x16,0x5F,0x91,0x16,0x71,0x31,0x17,0x78,0xD1,0x17,0x85,0x91,0x18,0xFF,0x00,0x40,0x2C,0xBE,0x22,0x2D,0xE3,0x72,0x2E,0xF1,0xB2,0x2F,0x0A,0x23,0x31,0xFF,0x00,0x80,0x2D,0xD0,0x72,0x2E,0xF8,0xD2,0x2F,0x07,0xB3,0x31,0x25,0x03,0x34,0xFF},
{
    0x00,0x00,0x2E,0xD5,0x02,0x2F,0xFC,0x62,0x31,0x22,0x03,0x33,0x4D,0x53,0x37,0xFF,0x00,0x20,0x2E,0xE4,0xA2,0x2F,0x11,0x13,0x32,0x44,0x73,0x35,0x95,0xE3,0x3B,0xFF,0x00,0xE0,0x2E,0xE8,0x62,0x30,0x1A,0xA3,0x33,0x57,0x03,0x38,0xB8,0x73,0x3F,0xFF,0x00,0x00,0x2F,0xEC,0xC2,0x30,0x25,0xB3,0x34,0x72,0xA3,0x3A,0xF7,0x73,0x43,0xFF,0x00,0x80,0x2F,0xF5,0x52,0x31,0x3B,0xC3,0x35,0x94,0xB3,0x3D,0x2E,0xD4,0x46,0xFF,0x00,0xA0,0x2F,0xFC,0x12,0x32,0x49,0x83,0x37,0xAE,0xC3,0x40,0x5F,0x54,0x4A,0xFF,0x00,0xF0,0x2F,0xFE,0xA2,0x32,0x5A,0x73,0x39,0xD7,0xB3,0x42,0x7F,0x84,0x4C,0xFF,0x00,0xB0,0x30,0x0A,0x73,0x34,0x87,0x63,0x3D,0x21,0x94,0x47,0xD4,0x54,0x52,0xFF,0x00,0x80,0x31,0x19,0xB3,0x37,0xD4,0xA3,0x43,0x9F,0x04,0x50,0x6F,0x85,0x5C,0xFF,0x00,0x30,0x33,0x34,0x13,0x3B,0x24,0xC4,0x49,0x0B,0x95,0x57,0xF3,0x85,0x65,0xFF,0x00,0xC0,0x34,0x4A,0xF3,0x3E,0x6F,0x54,0x4E,0x6D,0x45,0x5E,0x65,0x36,0x6D,0xFF,0x00,0x50,0x36,0x64,0x43,0x42,0xB9,0xD4,0x53,0xC8,0x35,0x64,0xCF,0x46,0x74,0xFF,
0x00,0x40,0x38,0x82,0x93,0x45,0xF9,0xB4,0x58,0x19,0xC6,0x69,0x30,0xC7,0x7A,0xFF,0x00,0xD0,0x3B,0xBC,0xE3,0x4B,0x6E,0xA5,0x60,0xA2,0xC6,0x73,0xDC,0x77,0x86,0xFF,0x00,0xD0,0x3E,0xF2,0xD3,0x50,0xCE,0xB5,0x67,0x24,0x87,0x7C,0x78,0x08,0x91,0xFF,0x00,0x90,0x42,0x28,0xF4,0x55,0x2E,0x46,0x6E,0x9A,0xB7,0x84,0x03,0xC9,0x9A,0xFF,0x00,0xC0,0x45,0x5C,0x94,0x5A,0x83,0x46,0x74,0x04,0x08,0x8C,0x8C,0x49,0xA4,0xFF,0x00,0x00,0x49,0x90,0x04,0x5F,0xD1,0xF6,0x79,0x69,0x48,0x93,0x0C,0x6A,0xAD,0xFF,0x00,0xD0,0x4B,0xBE,0x14,0x63,0x1E,0x47,0x7F,0xC8,0x08,0x9A,0x8C,0x1A,0xB6,0xFF,0x00,0xF0,0x4E,0xEF,0x94,0x66,0x65,0x47,0x84,0x23,0x79,0xA0,0x06,0xBB,0xBE,0xFF,0x00,0x40,0x50,0x04,0xA5,0x68,0x87,0xA7,0x86,0x4F,0xB9,0xA3,0x40,0x1B,0xC3,0xFF,0x00,0x90,0x51,0x1A,0x45,0x6A,0xA8,0x07,0x89,0x78,0xD9,0xA6,0x7A,0xFB,0xC6,0xFF,0x00,0xF0,0x52,0x2E,0x15,0x6C,0xC9,0x27,0x8B,0xA5,0x09,0xAA,0xB4,0x9B,0xCB,0xFF,0x00,0x20,0x54,0x40,0xB5,0x6D,0xE9,0x67,0x8D,0xD3,0xE9,0xAC,0xEC,0xEB,0xCF,0xFF,
0x00,0x70,0x55,0x54,0x85,0x6F,0x09,0xD8,0x8F,0xFC,0xD9,0xAF,0x2A,0x0C,0xD4,0xFF,0x00,0x80,0x56,0x69,0x35,0x71,0x28,0x08,0x92,0x23,0xDA,0xB2,0x65,0x5C,0xD8,0xFF,0x00,0xE0,0x57,0x7C,0xC5,0x72,0x44,0x28,0x94,0x4D,0xCA,0xB5,0x9F,0xAC,0xDC,0xFF,0x00,0x00,0x59,0x90,0x55,0x74,0x64,0x68,0x96,0x77,0xCA,0xB8,0xD6,0xBC,0xE0,0xFF,0x00,0x30,0x5A,0xA3,0xF5,0x75,0x80,0x68,0x98,0x9C,0x9A,0xBB,0x11,0x3D,0xE5,0xFF,0x00,0x70,0x5B,0xB5,0x55,0x77,0x99,0x78,0x9A,0xC4,0xFA,0xBE,0x4E,0x5D,0xE9,0xFF,0x00,0x70,0x5B,0xB5,0x55,0x77,0x99,0x78,0x9A,0xC4,0xFA,0xBE,0x4E,0x5D,0xE9,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x20,0x16,0x5F,0x91,0x16,0x71,0x31,0x17,0x78,0xD1,0x17,0x85,0x91,0x18,0xFF,0x00,0x40,0x2C,0xBE,0x22,0x2D,0xE3,0x72,0x2E,0xF1,0xB2,0x2F,0x0A,0x23,0x31,0xFF,0x00,0x80,0x2D,0xD0,0x72,0x2E,0xF8,0xD2,0x2F,0x07,0xB3,0x31,0x25,0x03,0x34,0xFF,0x00,0x00,0x2E,0xD5,0x02,0x2F,0xFC,0x62,0x31,0x22,0x03,0x33,0x4D,0x53,0x37,0xFF,
0x00,0x20,0x2E,0xE4,0xA2,0x2F,0x11,0x13,0x32,0x44,0x73,0x35,0x95,0xE3,0x3B,0xFF,0x00,0xE0,0x2E,0xE8,0x62,0x30,0x1A,0xA3,0x33,0x57,0x03,0x38,0xB8,0x73,0x3F,0xFF,0x00,0x00,0x2F,0xEC,0xC2,0x30,0x25,0xB3,0x34,0x72,0xA3,0x3A,0xF7,0x73,0x43,0xFF,0x00,0x80,0x2F,0xF5,0x52,0x31,0x3B,0xC3,0x35,0x94,0xB3,0x3D,0x2E,0xD4,0x46,0xFF,0x00,0xA0,0x2F,0xFC,0x12,0x32,0x49,0x83,0x37,0xAE,0xC3,0x40,0x5F,0x54,0x4A,0xFF,0x00,0xF0,0x2F,0xFE,0xA2,0x32,0x5A,0x73,0x39,0xD7,0xB3,0x42,0x7F,0x84,0x4C,0xFF,0x00,0xB0,0x30,0x0A,0x73,0x34,0x87,0x63,0x3D,0x21,0x94,0x47,0xD4,0x54,0x52,0xFF,0x00,0x80,0x31,0x19,0xB3,0x37,0xD4,0xA3,0x43,0x9F,0x04,0x50,0x6F,0x85,0x5C,0xFF,0x00,0x30,0x33,0x34,0x13,0x3B,0x24,0xC4,0x49,0x0B,0x95,0x57,0xF3,0x85,0x65,0xFF,0x00,0xC0,0x34,0x4A,0xF3,0x3E,0x6F,0x54,0x4E,0x6D,0x45,0x5E,0x65,0x36,0x6D,0xFF,0x00,0x50,0x36,0x64,0x43,0x42,0xB9,0xD4,0x53,0xC8,0x35,0x64,0xCF,0x46,0x74,0xFF,0x00,0x40,0x38,0x82,0x93,0x45,0xF9,0xB4,0x58,0x19,0xC6,0x69,0x30,0xC7,0x7A,0xFF,
0x00,0xD0,0x3B,0xBC,0xE3,0x4B,0x6E,0xA5,0x60,0xA2,0xC6,0x73,0xDC,0x77,0x86,0xFF,0x00,0xD0,0x3E,0xF2,0xD3,0x50,0xCE,0xB5,0x67,0x24,0x87,0x7C,0x78,0x08,0x91,0xFF,0x00,0x90,0x42,0x28,0xF4,0x55,0x2E,0x46,0x6E,0x9A,0xB7,0x84,0x03,0xC9,0x9A,0xFF,0x00,0xC0,0x45,0x5C,0x94,0x5A,0x83,0x46,0x74,0x04,0x08,0x8C,0x8C,0x49,0xA4,0xFF,0x00,0x00,0x49,0x90,0x04,0x5F,0xD1,0xF6,0x79,0x69,0x48,0x93,0x0C,0x6A,0xAD,0xFF,0x00,0xD0,0x4B,0xBE,0x14,0x63,0x1E,0x47,0x7F,0xC8,0x08,0x9A,0x8C,0x1A,0xB6,0xFF,0x00,0xF0,0x4E,0xEF,0x94,0x66,0x65,0x47,0x84,0x23,0x79,0xA0,0x06,0xBB,0xBE,0xFF,0x00,0x40,0x50,0x04,0xA5,0x68,0x87,0xA7,0x86,0x4F,0xB9,0xA3,0x40,0x1B,0xC3,0xFF,0x00,0x90,0x51,0x1A,0x45,0x6A,0xA8,0x07,0x89,0x78,0xD9,0xA6,0x7A,0xFB,0xC6,0xFF,0x00,0xF0,0x52,0x2E,0x15,0x6C,0xC9,0x27,0x8B,0xA5,0x09,0xAA,0xB4,0x9B,0xCB,0xFF,0x00,0x20,0x54,0x40,0xB5,0x6D,0xE9,0x67,0x8D,0xD3,0xE9,0xAC,0xEC,0xEB,0xCF,0xFF,0x00,0x70,0x55,0x54,0x85,0x6F,0x09,0xD8,0x8F,0xFC,0xD9,0xAF,0x2A,0x0C,0xD4,0xFF,
0x00,0x80,0x56,0x69,0x35,0x71,0x28,0x08,0x92,0x23,0xDA,0xB2,0x65,0x5C,0xD8,0xFF,0x00,0xE0,0x57,0x7C,0xC5,0x72,0x44,0x28,0x94,0x4D,0xCA,0xB5,0x9F,0xAC,0xDC,0xFF,0x00,0x00,0x59,0x90,0x55,0x74,0x64,0x68,0x96,0x77,0xCA,0xB8,0xD6,0xBC,0xE0,0xFF,0x00,0x30,0x5A,0xA3,0xF5,0x75,0x80,0x68,0x98,0x9C,0x9A,0xBB,0x11,0x3D,0xE5,0xFF},
{0x00,0x70,0x5B,0xB5,0x55,0x77,0x99,0x78,0x9A,0xC4,0xFA,0xBE,0x4E,0x5D,0xE9,0xFF,0x00,0x70,0x5B,0xB5,0x55,0x77,0x99,0x78,0x9A,0xC4,0xFA,0xBE,0x4E,0x5D,0xE9,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x20,0x16,0x5F,0x91,0x16,0x71,0x31,0x17,0x78,0xD1,0x17,0x85,0x91,0x18,0xFF,0x00,0x40,0x2C,0xBE,0x22,0x2D,0xE3,0x72,0x2E,0xF1,0xB2,0x2F,0x0A,0x23,0x31,0xFF,0x00,0x80,0x2D,0xD0,0x72,0x2E,0xF8,0xD2,0x2F,0x07,0xB3,0x31,0x25,0x03,0x34,0xFF,0x00,0x00,0x2E,0xD5,0x02,0x2F,0xFC,0x62,0x31,0x22,0x03,0x33,0x4D,0x53,0x37,0xFF,0x00,0x20,0x2E,0xE4,0xA2,0x2F,0x11,0x13,0x32,0x44,0x73,0x35,0x95,0xE3,0x3B,0xFF,0x00,0xE0,0x2E,0xE8,0x62,0x30,0x1A,0xA3,0x33,0x57,0x03,0x38,0xB8,0x73,0x3F,0xFF,0x00,0x00,0x2F,0xEC,0xC2,0x30,0x25,0xB3,0x34,0x72,0xA3,0x3A,0xF7,0x73,0x43,0xFF,0x00,0x80,0x2F,0xF5,0x52,0x31,0x3B,0xC3,0x35,0x94,0xB3,0x3D,0x2E,0xD4,0x46,0xFF,0x00,0xA0,0x2F,0xFC,0x12,0x32,0x49,0x83,0x37,0xAE,0xC3,0x40,0x5F,0x54,0x4A,0xFF,
0x00,0xF0,0x2F,0xFE,0xA2,0x32,0x5A,0x73,0x39,0xD7,0xB3,0x42,0x7F,0x84,0x4C,0xFF,0x00,0xB0,0x30,0x0A,0x73,0x34,0x87,0x63,0x3D,0x21,0x94,0x47,0xD4,0x54,0x52,0xFF,0x00,0x80,0x31,0x19,0xB3,0x37,0xD4,0xA3,0x43,0x9F,0x04,0x50,0x6F,0x85,0x5C,0xFF,0x00,0x30,0x33,0x34,0x13,0x3B,0x24,0xC4,0x49,0x0B,0x95,0x57,0xF3,0x85,0x65,0xFF,0x00,0xC0,0x34,0x4A,0xF3,0x3E,0x6F,0x54,0x4E,0x6D,0x45,0x5E,0x65,0x36,0x6D,0xFF,0x00,0x50,0x36,0x64,0x43,0x42,0xB9,0xD4,0x53,0xC8,0x35,0x64,0xCF,0x46,0x74,0xFF,0x00,0x40,0x38,0x82,0x93,0x45,0xF9,0xB4,0x58,0x19,0xC6,0x69,0x30,0xC7,0x7A,0xFF,0x00,0xD0,0x3B,0xBC,0xE3,0x4B,0x6E,0xA5,0x60,0xA2,0xC6,0x73,0xDC,0x77,0x86,0xFF,0x00,0xD0,0x3E,0xF2,0xD3,0x50,0xCE,0xB5,0x67,0x24,0x87,0x7C,0x78,0x08,0x91,0xFF,0x00,0x90,0x42,0x28,0xF4,0x55,0x2E,0x46,0x6E,0x9A,0xB7,0x84,0x03,0xC9,0x9A,0xFF,0x00,0xC0,0x45,0x5C,0x94,0x5A,0x83,0x46,0x74,0x04,0x08,0x8C,0x8C,0x49,0xA4,0xFF,0x00,0x00,0x49,0x90,0x04,0x5F,0xD1,0xF6,0x79,0x69,0x48,0x93,0x0C,0x6A,0xAD,0xFF,
0x00,0xD0,0x4B,0xBE,0x14,0x63,0x1E,0x47,0x7F,0xC8,0x08,0x9A,0x8C,0x1A,0xB6,0xFF,0x00,0xF0,0x4E,0xEF,0x94,0x66,0x65,0x47,0x84,0x23,0x79,0xA0,0x06,0xBB,0xBE,0xFF,0x00,0x40,0x50,0x04,0xA5,0x68,0x87,0xA7,0x86,0x4F,0xB9,0xA3,0x40,0x1B,0xC3,0xFF,0x00,0x90,0x51,0x1A,0x45,0x6A,0xA8,0x07,0x89,0x78,0xD9,0xA6,0x7A,0xFB,0xC6,0xFF,0x00,0xF0,0x52,0x2E,0x15,0x6C,0xC9,0x27,0x8B,0xA5,0x09,0xAA,0xB4,0x9B,0xCB,0xFF,0x00,0x20,0x54,0x40,0xB5,0x6D,0xE9,0x67,0x8D,0xD3,0xE9,0xAC,0xEC,0xEB,0xCF,0xFF,0x00,0x70,0x55,0x54,0x85,0x6F,0x09,0xD8,0x8F,0xFC,0xD9,0xAF,0x2A,0x0C,0xD4,0xFF,0x00,0x80,0x56,0x69,0x35,0x71,0x28,0x08,0x92,0x23,0xDA,0xB2,0x65,0x5C,0xD8,0xFF,0x00,0xE0,0x57,0x7C,0xC5,0x72,0x44,0x28,0x94,0x4D,0xCA,0xB5,0x9F,0xAC,0xDC,0xFF,0x00,0x00,0x59,0x90,0x55,0x74,0x64,0x68,0x96,0x77,0xCA,0xB8,0xD6,0xBC,0xE0,0xFF,0x00,0x30,0x5A,0xA3,0xF5,0x75,0x80,0x68,0x98,0x9C,0x9A,0xBB,0x11,0x3D,0xE5,0xFF,0x00,0x70,0x5B,0xB5,0x55,0x77,0x99,0x78,0x9A,0xC4,0xFA,0xBE,0x4E,0x5D,0xE9,0xFF,
0x00,0x70,0x5B,0xB5,0x55,0x77,0x99,0x78,0x9A,0xC4,0xFA,0xBE,0x4E,0x5D,0xE9,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x20,0x16,0x5F,0x91,0x16,0x71,0x31,0x17,0x78,0xD1,0x17,0x85,0x91,0x18,0xFF,0x00,0x40,0x2C,0xBE,0x22,0x2D,0xE3,0x72,0x2E,0xF1,0xB2,0x2F,0x0A,0x23,0x31,0xFF,0x00,0x80,0x2D,0xD0,0x72,0x2E,0xF8,0xD2,0x2F,0x07,0xB3,0x31,0x25,0x03,0x34,0xFF,0x00,0x00,0x2E,0xD5,0x02,0x2F,0xFC,0x62,0x31,0x22,0x03,0x33,0x4D,0x53,0x37,0xFF,0x00,0x20,0x2E,0xE4,0xA2,0x2F,0x11,0x13,0x32,0x44,0x73,0x35,0x95,0xE3,0x3B,0xFF,0x00,0xE0,0x2E,0xE8,0x62,0x30,0x1A,0xA3,0x33,0x57,0x03,0x38,0xB8,0x73,0x3F,0xFF,0x00,0x00,0x2F,0xEC,0xC2,0x30,0x25,0xB3,0x34,0x72,0xA3,0x3A,0xF7,0x73,0x43,0xFF,0x00,0x80,0x2F,0xF5,0x52,0x31,0x3B,0xC3,0x35,0x94,0xB3,0x3D,0x2E,0xD4,0x46,0xFF,0x00,0xA0,0x2F,0xFC,0x12,0x32,0x49,0x83,0x37,0xAE,0xC3,0x40,0x5F,0x54,0x4A,0xFF,0x00,0xF0,0x2F,0xFE,0xA2,0x32,0x5A,0x73,0x39,0xD7,0xB3,0x42,0x7F,0x84,0x4C,0xFF,
0x00,0xB0,0x30,0x0A,0x73,0x34,0x87,0x63,0x3D,0x21,0x94,0x47,0xD4,0x54,0x52,0xFF,0x00,0x80,0x31,0x19,0xB3,0x37,0xD4,0xA3,0x43,0x9F,0x04,0x50,0x6F,0x85,0x5C,0xFF,0x00,0x30,0x33,0x34,0x13,0x3B,0x24,0xC4,0x49,0x0B,0x95,0x57,0xF3,0x85,0x65,0xFF,0x00,0xC0,0x34,0x4A,0xF3,0x3E,0x6F,0x54,0x4E,0x6D,0x45,0x5E,0x65,0x36,0x6D,0xFF,0x00,0x50,0x36,0x64,0x43,0x42,0xB9,0xD4,0x53,0xC8,0x35,0x64,0xCF,0x46,0x74,0xFF,0x00,0x40,0x38,0x82,0x93,0x45,0xF9,0xB4,0x58,0x19,0xC6,0x69,0x30,0xC7,0x7A,0xFF,0x00,0xD0,0x3B,0xBC,0xE3,0x4B,0x6E,0xA5,0x60,0xA2,0xC6,0x73,0xDC,0x77,0x86,0xFF,0x00,0xD0,0x3E,0xF2,0xD3,0x50,0xCE,0xB5,0x67,0x24,0x87,0x7C,0x78,0x08,0x91,0xFF,0x00,0x90,0x42,0x28,0xF4,0x55,0x2E,0x46,0x6E,0x9A,0xB7,0x84,0x03,0xC9,0x9A,0xFF,0x00,0xC0,0x45,0x5C,0x94,0x5A,0x83,0x46,0x74,0x04,0x08,0x8C,0x8C,0x49,0xA4,0xFF,0x00,0x00,0x49,0x90,0x04,0x5F,0xD1,0xF6,0x79,0x69,0x48,0x93,0x0C,0x6A,0xAD,0xFF,0x00,0xD0,0x4B,0xBE,0x14,0x63,0x1E,0x47,0x7F,0xC8,0x08,0x9A,0x8C,0x1A,0xB6,0xFF,
0x00,0xF0,0x4E,0xEF,0x94,0x66,0x65,0x47,0x84,0x23,0x79,0xA0,0x06,0xBB,0xBE,0xFF,0x00,0x40,0x50,0x04,0xA5,0x68,0x87,0xA7,0x86,0x4F,0xB9,0xA3,0x40,0x1B,0xC3,0xFF,0x00,0x90,0x51,0x1A,0x45,0x6A,0xA8,0x07,0x89,0x78,0xD9,0xA6,0x7A,0xFB,0xC6,0xFF,0x00,0xF0,0x52,0x2E,0x15,0x6C,0xC9,0x27,0x8B,0xA5,0x09,0xAA,0xB4,0x9B,0xCB,0xFF},
{0x00,0x20,0x54,0x40,0xB5,0x6D,0xE9,0x67,0x8D,0xD3,0xE9,0xAC,0xEC,0xEB,0xCF,0xFF,0x00,0x70,0x55,0x54,0x85,0x6F,0x09,0xD8,0x8F,0xFC,0xD9,0xAF,0x2A,0x0C,0xD4,0xFF,0x00,0x80,0x56,0x69,0x35,0x71,0x28,0x08,0x92,0x23,0xDA,0xB2,0x65,0x5C,0xD8,0xFF,0x00,0xE0,0x57,0x7C,0xC5,0x72,0x44,0x28,0x94,0x4D,0xCA,0xB5,0x9F,0xAC,0xDC,0xFF,0x00,0x00,0x59,0x90,0x55,0x74,0x64,0x68,0x96,0x77,0xCA,0xB8,0xD6,0xBC,0xE0,0xFF,0x00,0x30,0x5A,0xA3,0xF5,0x75,0x80,0x68,0x98,0x9C,0x9A,0xBB,0x11,0x3D,0xE5,0xFF,0x00,0x70,0x5B,0xB5,0x55,0x77,0x99,0x78,0x9A,0xC4,0xFA,0xBE,0x4E,0x5D,0xE9,0xFF,0x00,0x70,0x5B,0xB5,0x55,0x77,0x99,0x78,0x9A,0xC4,0xFA,0xBE,0x4E,0x5D,0xE9,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},


}

local MAX_WRITELEN = 512
local MAX_READLEN = 512
-------------- SPI init config --------------
--SPI enable
local gSPIEN = 1
--CS
local gSPICS = 1
--Read-write data bit width
local gSPIBits = 8
--SPI clock

local gSPIClock = 5000000 --5M
--gSPIClock = 10000000
--SPI IP output channel(1:not 2832, 2:2832A, 4:2832B)
local gIPChnSel = 1
--not 2832 data channel setting(E058A and E059A have different definitions)0~3
-- E058A  1-mipi c-phy ;2-mipi d-phy 1.5G; 3-dp, 4-flash E059A  1-ttl flash ;2-d-phy 2.5G; 3-lvds;4-dp
local gDataChnSel = 3
--serial bus setting, "4-wire" or "3-wire"
local gWireMode = 0
-- SPI Four working modes of SPI bus (SP0, SP1, SP2, SP3)
-- Mode 0: CPOL=0, CPHA=0
-- Mode 1: CPOL=0, CPHA=1
-- Mode 2: CPOL=1, CPHA=0
-- Mode 2: CPOL=1, CPHA=0
-- Mode 3: CPOL=1, CPHA=1
local gFourWireSubMode = 0
--SPI IP 3-wire Signal transmission direction(0:3-wire in, 1:3-wire out)
local gThreeWireMode = 0
--SpiConfig(1, 1, 8, 10000000, 1, channel, 0, 3, 0)

local function WriteCsv(strFileName, tContent)
	local file = ""
	local line = ""
	
	for i = 1, #tContent do
		for j = 1, #tContent[i] do
			if string.find(tContent[i][j], '[,"]') then
				
				tContent[i][j] = '"' .. string.gsub(tContent[i][j], '"', '""') .. '"';
			end
			line = line .. tContent[i][j] .. ","
		end
		line = line .. "\n"
	end
	
	file = assert(io.open(strFileName, "a+b"));--??????
	file:write(line);
	file:close();
	
end

local function F_SaveCSV2PC(filename)
    local PcIP = GetPcIp()
    local ftpPath = string.format('ftp://%s/', PcIP)
    --"ftp://192.168.10.111/"

    local filepath = GetLuaFolderName()

    local FTP = require('JC_FTP')
    filepath = filepath .. 'CSV/'
    --MSG.Println(filepath)
    FTP.SendFile2UIS(ftpPath, filename, filepath)
end
-------------- SPI init config end--------------
function InitSPI_OLD()
	
    local chn = 1
	--Switch I2C/SPI (1 : i2c, 0 : spi)
	SPI.I2CSPISwitch(chn, 0);
	-- E058A  1-mipi c-phy ;2-mipi d-phy 1.5G; 3-dp, 4-flash E059A  1-ttl flash ;2-d-phy 2.5G; 3-lvds;4-dp
	SPI.SetSPIChannel(chn, gDataChnSel)
	MSG.Println("SetSPIChannel : %d", gDataChnSel)
	--  0:1.8 or 1:3.3v
	SPI.SetSPILevel(chn, 1)
	SPI.SetI2cPullUp(chn, 1)

	SPI.SpiConfig(chn, gSPIEN, gSPICS, gSPIBits, gSPIClock, gIPChnSel, gDataChnSel, gWireMode, gFourWireSubMode, gThreeWireMode)
	-- set CS Mode 0
	SPI.SpiSetCsMode(chn, 0)
	
end
function InitSPI()
	
    local chn = 1
	--Switch I2C/SPI (1 : i2c, 0 : spi)
	SPI.I2CSPISwitch(chn, 0);
	-- E058A  1-mipi c-phy ;2-mipi d-phy 1.5G; 3-dp, 4-flash E059A  1-ttl flash ;2-d-phy 2.5G; 3-lvds;4-dp
	SPI.SetSPIChannel(chn, gDataChnSel)
	MSG.Println("SetSPIChannel : %d", gDataChnSel)
	--  0:1.8 or 1:3.3v
	SPI.SetSPILevel(chn, 1)
	SPI.SetI2cPullUp(chn, 1)

	SPI.SpiConfig(chn, gSPIEN, gSPICS, gSPIBits, gSPIClock, gIPChnSel, gDataChnSel, gWireMode, gFourWireSubMode, gThreeWireMode)
	-- set CS Mode 0
	SPI.SpiSetCsMode(chn, 0)
	
	PWR.SetPwrOnOff(chn, POWER_TYPE_VDDIO, ON);--SPI
	
end

function UnInitSPI()
	
    local chn = 1
	
	PWR.SetPwrOnOff(chn, POWER_TYPE_VDDIO, OFF);--SPI
	
end


local function GetFileCRCData(filePath)
    
    local str
    local block = 8
    local CRCData = {}
    
    local fread = io.open(filePath, "rb");
    --local current = fread:seek();
    local size = fread:seek("end");
    fread:seek("end", -4)
    --fread:seek("set", current);
    --local content = fread:read("*a")
    
    
    while true do
		local bytes = fread:read(block)

		if not bytes then
			break
		end

		for b in string.gmatch(bytes, ".") do
			--io.write(string.format("%02X ", string.byte(b)))
			str = string.format("%02X ", string.byte(b))
			table.insert(CRCData, tonumber(str,16))
		end

	end
    fread.close()
    return CRCData;
end


local function GetFileSize(filePath)
    
    local fread = io.open(filePath, "rb");
    local size = fread:seek("end");
    fread.close()
    return size;
end


local function ReadBinFile(binPath)
    
    local fread = io.open(binPath, "rb");
    local size = fread:seek("end");
    fread:seek("set");
    local readdata = fread:read(size);

    local filedata = {};
    for i = 1, size do
        filedata[i] = string.byte(string.sub(readdata, i, i))
        --table.insert(filedata, string.byte(string.sub(readdata,i,i)));
    end
    fread:close();
    
    return filedata
end


function tranData2Bin(gammaData)
    
    local ret = 0
    local binData = {}
    
    MSG.Println("tranData2Bin ...")
    for i = 1, #gammaData do
        for j = 1, #gammaData[i] do
            local zdata = gammaData[i][j]
            local lenth = #binData
            for n = 1, #zdata do
                binData[lenth + n] = zdata[n]
            end
           
        end
    end
    --[[
    local str = ""
    for i = 1, #binData do
        str = string.format("%s0x%02X,", str, binData[i])
        if i %16 == 0 then
            str = str .. "\n"
        end
        
    end
    MSG.Println("bin Data Len : %d", #binData)
    MSG.Println(str)
    --]]
    MSG.Println("tranData2Bin ... end")
    return binData
end


function waitFlashStatus(chn)

    local ret = 1
    local data_05 = {}
    local data_35 = {}

    for i = 1, 100 do

        data_05 = SPI.Read(chn, {0x05}, 2);
        data_35 = SPI.Read(chn, {0x35}, 2);

        if data_05[1] & 0x01 == 0x00 then
            --MSG.Println("falsh status 05 : %s", ADDP.Array2Hexstr(data_05))
            --MSG.Println("falsh status 35 : %s", ADDP.Array2Hexstr(data_35))
            ret = 0
            break
        end

        TIME.Delay(10)
    end
    
    if ret ~= 0 then
        MSG.Error("waitFlashStatus time out!")
    end
    return ret
end
-- 64KB Block Erase
function BlockErase64K(chn, addr)
    
    local writeData = {0x06}
    SPI.Write(chn, writeData)
    TIME.Delay(5)
    
    writeData = {}
    writeData[1] = 0xD8
    writeData[2] = (addr >> 16)& 0xFF
    writeData[3] = (addr >> 8)& 0xFF
    writeData[4] = addr & 0xFF
    
    SPI.Write(chn, writeData)
    
end

local function QSPIWriteFlash(chn, addr, data)
    
    local totalLen = #data
    local maxWriteLen = 0x100
    local writeLen = 0
    local writeData = {}
    local offset = 0
    local addrLen = 3
    

    --local writeData = {}
    --QspiFlashWrite(1, 0x32, 4, 0x20000, 4, writeData);
    while offset < totalLen do
        
        if totalLen - offset > maxWriteLen then
            writeLen = maxWriteLen
        else
            writeLen = totalLen - offset
        end
        -- write enable
        writeData = {0x06}
        SPI.Write(chn, writeData)
        writeData = ADDP.CarveTb(data, offset + 1, writeLen)
        --QspiFlashWrite(1, 0x32, addrLen, addr + offset, writeLen, writeData);
        MSG.Println("addr : 0x%05X, offset : 0x%05X, writeLen : %d", addr, offset, writeLen)
        SPI.QuadInputPageProgram(chn, 0x32, addr + offset, addrLen, writeData)
       
        --MSG.Println("writeData : %s", ADDP.Array2Hexstr(writeData))
        --addr = addr + writeLen
        offset = offset + writeLen
        TIME.Delay(5)
    end
    
end


local function FlashRead(chn, addr, readLen)
    
    local readData = {}
    
    MSG.Println("FlashRead ...")
    MSG.Println("addr : 0x%06X, readLen : %d, 0x%06X", addr, readLen, readLen)
 

    local readUnit = 256
    local Offset = 0
    while(Offset < readLen) do
        local readBufLen = 0
        local readBufAddr = addr + Offset
        local readBuf = {}
        
        if(readLen - Offset)> readUnit then
            readBufLen = readUnit
        else
            readBufLen = readLen - Offset
        end
        local writeData = {0x6}
        SPI.Write(chn, writeData) 
        MSG.Println("----- readBufAddr : 0x%06X, readBufLen : %d, 0x%06X", readBufAddr, readBufLen, readBufLen)
        writeData = {0x03}
        writeData[2] = (readBufAddr >> 16)& 0xFF
        writeData[3] = (readBufAddr >> 8)& 0xFF
        writeData[4] = readBufAddr & 0xFF
        readBuf = SPI.Read(chn, writeData, readBufLen)
        --MSG.Println(ADDP.Array2Hexstr(readBuf))
        for i = 1, readBufLen do
            readData[Offset + i] = readBuf[i]
        end
        
        Offset = Offset + readBufLen
    end
    
    return readData
end


local function PageProgram(chn, addr, binData)
    
    local binDataLen = #binData
    local writeUnit = 256
    local Offset = 0
    MSG.Println("PageProgram ...")
    MSG.Println("addr : 0x%06X, binDataLen : %d, 0x%06X", addr, binDataLen, binDataLen)

    
    while(Offset < binDataLen) do
        local writeLen = 0
        local writeAddr = addr + Offset
        local writeBuf = {}
        --MSG.Println("------ writeAddr : 0x%06X", writeAddr)
        if(binDataLen - Offset)> writeUnit then
            writeLen = writeUnit
        else
            writeLen = binDataLen - Offset
        end
        writeBuf = ADDP.CarveTb(binData, Offset + 1, writeLen)
        -- write enable
        local writeData = {0x6}
        SPI.Write(chn, writeData)
        
        writeData = {0x02}
        writeData[2] = (writeAddr >> 16)& 0xFF
        writeData[3] = (writeAddr >> 8)& 0xFF
        writeData[4] = writeAddr & 0xFF
        for i = 1, writeLen do
            writeData[i + 4] = writeBuf[i]
        end
        SPI.Write(chn, writeData)
 
        --print(ADDP.Array2Hexstr(writeBuf))
        waitFlashStatus(chn)
        
        Offset = Offset + writeLen
    end
    
end




-- Gamma addr 0x20000
function F_OTPReadGamma()
    
    local ret = 0
    local chn = 1
    local readData = {}
    local writeData = {}
    local readLen = 0
    
    MSG.Println("F_OTPReadGamma ... start")
    require ("IC_GAMMA_START")
    F_SPIControl()
    --MSG.Debug("Flash start")

    TIME.Delay(100);
    
    GPIO.SetGpioOutOnOff(chn, 4, ON)
    
    local gammaAddr = 0x20000
    
    -- 0: spi init
    InitSPI()
    
    -- 1: read Flash ID 0x9F
    writeData = {0x9F}
    readLen = 3
    local FlashID = SPI.Read(chn, writeData, readLen)
    MSG.Println("Flash ID : %s", ADDP.Array2Hexstr(FlashID))
    if FlashID[1] == 0 or FlashID[1] == 0xFF then
        MSG.Error("read FlashID NG !")
        return 1
    end
    
    -- 2 : read status
    local data_05 = SPI.Read(1, {0x05}, 2);
    local data_35 = SPI.Read(1, {0x35}, 2);
    MSG.Println("falsh status 05 : %s", ADDP.Array2Hexstr(data_05))
    MSG.Println("falsh status 35 : %s", ADDP.Array2Hexstr(data_35))
    TIME.Delay(5)
   --
    -- 3 : read Gamma
    MSG.Println("read Gamma-----------------1")
    -- write enable
    writeData = {0x06}
    SPI.Write(chn, writeData)
    TIME.Delay(5)
    local tContent={}
    for i = 1, 14 do
        local addr = gammaAddr + (i - 1) * 0x400
        local buf = {}
        local cmd = 0x6B
        local addrLen = 3
        local readLen = 0x400
		MSG.Println("read Data-----------------1")

		local readBuf = FlashRead(chn, addr, readLen)
    
		MSG.Println("----------------------------")
		MSG.Println("FlashRead addr : 0x%06X ", addr)
    
		MSG.Println(ADDP.Array2Hexstr(readBuf))
		MSG.Println("----------------------------")
        table.insert(tContent,readBuf)
    end

    MSG.Println("F_OTPReadGamma ... end")
    WriteCsv(GetLuaFolderName() .. 'CSV//' .. 'readgamma.csv', tContent)
    return ret
    
end




--InitCode Addr : 0x0000, 0x10000
function F_OTPWriteGamma()
    
    local ret = 0
    local chn = 1
    local readData = {}
    local writeData = {}
    local readLen = 0
    
    MSG.Println("F_OTPWriteGamma ... start")
    local startTime = socket.gettime()
    F_SPIControl()
    --PWR.SetPwrOnOff(chn, POWER_TYPE_VDDIO, ON);
    TIME.Delay(300);
    gLogLevel = 3-- 3 : open (ERROR,WARNING) Log
    GPIO.SetGpioOutOnOff(chn, 4, ON)
    TIME.Delay(300);

    MSG.Println("cal Gamma binData ...")
    local gammaAddr = 0x20000
    
    -- 0 gamma data ---> bin data
    F_Create_Flashtable()
    local binData = tranData2Bin(Gamma_Flashtable)
    local fileSize = #binData
    MSG.Println("-----------------------------")
    MSG.Println("binData length : %d --- 0x%02X", #binData, #binData)
    MSG.Println("-----------------------------")
    -- 0: spi init
  
	InitSPI()
    
    -- set die 0
    writeData = {0xF8}
    local dieID = SPI.Read(chn, writeData, 1)
    MSG.Println("1---read dieID 0xF8 : 0x%02X", dieID[1])
    writeData = {0xC2, 0x00}
    SPI.Write(chn, writeData)
    TIME.Delay(50)
    writeData = {0xF8}
    local dieID = SPI.Read(chn, writeData, 1)
    MSG.Println("2---read dieID 0xF8 : 0x%02X", dieID[1])
    -- software Reset
    writeData = {0x66}
    SPI.Write(chn, writeData)
    writeData = {0x99}
    SPI.Write(chn, writeData)
	
    -- 1: read Flash ID 0x9F
    writeData = {0x9F}
    readLen = 3
    local FlashID = SPI.Read(chn, writeData, readLen)
    MSG.Println("Flash ID : %s", ADDP.Array2Hexstr(FlashID))
    if FlashID[1] == 0 or FlashID[1] == 0xFF then
        MSG.Error("read FlashID NG !")
        return 1
    end
    
    -- 2 : read status
    local data_05 = SPI.Read(1, {0x05}, 1);
    local data_35 = SPI.Read(1, {0x35}, 1);
    local data_15 = SPI.Read(1, {0x15}, 1);
    MSG.Println("falsh status 05 : %s", ADDP.Array2Hexstr(data_05))
    MSG.Println("falsh status 35 : %s", ADDP.Array2Hexstr(data_35))
    MSG.Println("falsh status 15 : %s", ADDP.Array2Hexstr(data_15))
    TIME.Delay(5)
	
    MSG.Println("read Data-----------------1")
    -- write enable1
    local readAddr = gammaAddr
    readLen = 0x400
    local readBuf = FlashRead(chn, readAddr, readLen)
    
    MSG.Println("----------------------------")
    MSG.Println("FlashRead addr : 0x%06X ", readAddr)
    
    MSG.Println(ADDP.Array2Hexstr(readBuf))
    MSG.Println("----------------------------")
    
    -- 3 : erase
    MSG.Println("Erase ... start")
    local offsetAddr = 0x00000
    while(offsetAddr < fileSize) do
        local eraseAddr = gammaAddr + offsetAddr
  
        MSG.Println("CMD_BlockErase_64K, eraseAddr : 0x%06X", eraseAddr)
        BlockErase64K(chn, eraseAddr)
        
        --MSG.Println("read status ")
        if waitFlashStatus(chn) ~= 0 then
            break
        end
        offsetAddr = offsetAddr + 0x10000
    end
    MSG.Println("Erase ... end")
	
	MSG.Println("read Data-----------------2")
    -- write enable1
    local readAddr = gammaAddr
    readLen = 0x400
    local readBuf = FlashRead(chn, readAddr, readLen)
    
    MSG.Println("----------------------------")
    MSG.Println("FlashRead addr : 0x%06X ", readAddr)
        
    MSG.Println(ADDP.Array2Hexstr(readBuf))
    MSG.Println("----------------------------")

    MSG.Println("spiFlashWriteByBIN ... start")
    -- 4 : write to flash
    PageProgram(chn, gammaAddr, binData)
 
    -- 5: read data
    MSG.Println("read Data-----------------3")
    -- write enable1
    local readAddr = gammaAddr
    readLen = 0x400
    local readBuf = FlashRead(chn, readAddr, readLen)
    
    MSG.Println("----------------------------")
    MSG.Println("FlashRead addr : 0x%06X ", readAddr)
        
    MSG.Println(ADDP.Array2Hexstr(readBuf))
    MSG.Println("----------------------------")
    
    -- write enable2
    readLen = 0x400
    readAddr = gammaAddr + fileSize - 0x400
    readAddr= 0x70000
    readBuf = FlashRead(chn, readAddr, readLen)
    
    MSG.Println("----------------------------")
    MSG.Println("FlashRead addr : 0x%06X ", readAddr)
    
    MSG.Println(ADDP.Array2Hexstr(readBuf))
	gLogLevel = 1 -- 1 : open all Log (ERROR,WARNING,INFO,DEBUG)
    MSG.Println("----------------------------")
    local endTime = socket.gettime()
    MSG.Println("F_OTPWriteGamma ... end, runtime : %.2f", endTime - startTime)
	WRITE_GAMMAORDEMURACOUNT(gChannel,1)
    return ret
end


--InitCode Addr : 0x0000, 0x10000
function F_OTPWriteInitCode()
    
    local ret = 0
    local chn = 1
    local readData = {}
    local writeData = {}
    local readLen = 0
    
    MSG.Println("F_OTPWriteInitCode ... start")
    local startTime = socket.gettime()
    F_SPIControl()
    --PWR.SetPwrOnOff(chn, POWER_TYPE_VDDIO, ON);
    TIME.Delay(300);
    gLogLevel = 3-- 3 : open (ERROR,WARNING) Log
    GPIO.SetGpioOutOnOff(chn, 4, ON)
    TIME.Delay(300);
--MT9399_BOE_2560x1600_V12V8_20220825_0xAD97_28

	--local fileName = "MT9399_BOE_27366x2084_0x0505.bin"
	--MT9399_BOE_LTPO_v0_test code_0x14E2_20221004
	--MT9399_BOE_LTPO_new GOA timing_20220926.bin
	--MT9399_BOE_LTPO_new GOA timing_20220926
	--local fileName = " MT9399_BOE_2736x2084_0x58D2_20230406GBONEM1P.bin"
	local fileName = "MT9399_BOE_2736x2084_0x58D2_20230406GBOFF.bin"-------------切频率，切DBV,第二版DBV,GBOFF
	--local fileName = "MT9399_BOE_2736x2084_0x5953_20230416.bin"
	--local fileName = "MT9399_BOE_2736x2084_0x589D_2023021_20230307_0x5966_20230307_0x583A.bin"----第二版INITIAL CODE
	-- local fileName = "MT9399_BOE_2736x2084_0x589D_2023021_20230307_0x5966.bin"  -----第一版INITIAL CODE
	-- local fileName = "MT9399_BOE_2736x2084_0x589D_2023021_20230307_0x5966_0309_GBOFF.bin" -----第一版INITIAL CODE，GB OFF
	  
	local InitCodeAddr = 0x000000
    local luaPath = GetLuaFolderName()
    local filePath = string.format("%sCSV/%s", luaPath, fileName);   --测试用
	gLogLevel = 3-------------

    MSG.Println("Read Binary File ...")
    local binData = ReadBinFile(filePath)
    local fileSize = #binData
    --local fileSize = GetFileSize(filePath)
    
    MSG.Println("--------------------------------")
    MSG.Println("fileSize : %d, 0x%X", fileSize, fileSize)
    --MSG.Println("CRCData : %s", ADDP.Array2Hexstr(CRCData))
    --MSG.Println(ADDP.Array2Hexstr(binData))
    MSG.Println("--------------------------------")
    --]]
    -- 0: spi init
    InitSPI()
    
    -- set die 0
    writeData = {0xF8}
    local dieID = SPI.Read(chn, writeData, 1)
    MSG.Println("1---read dieID 0xF8 : 0x%02X", dieID[1])
    writeData = {0xC2, 0x00}
    SPI.Write(chn, writeData)
    TIME.Delay(50)
    writeData = {0xF8}
    local dieID = SPI.Read(chn, writeData, 1)
    MSG.Println("2---read dieID 0xF8 : 0x%02X", dieID[1])
    -- software Reset
    writeData = {0x66}
    SPI.Write(chn, writeData)
    writeData = {0x99}
    SPI.Write(chn, writeData)

    -- 1: read Flash ID 0x9F
    writeData = {0x9F}
    readLen = 3
    local FlashID = SPI.Read(chn, writeData, readLen)
    MSG.Println("Flash ID : %s", ADDP.Array2Hexstr(FlashID))
    if FlashID[1] == 0 or FlashID[1] == 0xFF then
        MSG.Error("read FlashID NG !")
        return 1
    end
    
    -- 2 : read status
    local data_05 = SPI.Read(1, {0x05}, 1);
    local data_35 = SPI.Read(1, {0x35}, 1);
    local data_15 = SPI.Read(1, {0x15}, 1);
    MSG.Println("falsh status 05 : %s", ADDP.Array2Hexstr(data_05))
    MSG.Println("falsh status 35 : %s", ADDP.Array2Hexstr(data_35))
    MSG.Println("falsh status 15 : %s", ADDP.Array2Hexstr(data_15))
    TIME.Delay(5)
	


    gLogLevel = 3 -- 2 : open (ERROR,WARNING,INFO) Log
    -- 3 : erase
    MSG.Println("Erase ... start")
    local offsetAddr = 0x00000
    while(offsetAddr < fileSize) do
        local eraseAddr = InitCodeAddr + offsetAddr
  
        MSG.Println("CMD_BlockErase_64K, eraseAddr : 0x%06X", eraseAddr)
        BlockErase64K(chn, eraseAddr)
        
        --MSG.Println("read status ")
        if waitFlashStatus(chn) ~= 0 then
            break
        end
        offsetAddr = offsetAddr + 0x10000
    end
    MSG.Println("Erase ... end")
	


    MSG.Println("spiFlashWriteByBIN ... start")
    -- 4 : write to flash
    PageProgram(chn, InitCodeAddr, binData)
    --gLogLevel = 1 -- 1 : open all Log (ERROR,WARNING,INFO,DEBUG)
    
    -- 5: read data
    MSG.Println("read Data-----------------3")
    -- write enable1
    local readAddr = InitCodeAddr
    readLen = 0x400
    local readBuf = FlashRead(chn, readAddr, readLen)
    
    MSG.Println("----------------------------")
    MSG.Println("FlashRead addr : 0x%06X ", readAddr)
        
    MSG.Println(ADDP.Array2Hexstr(readBuf))
    MSG.Println("----------------------------")
    
    -- write enable2
    readLen = 0x400
    readAddr = InitCodeAddr + fileSize - 0x400
    readAddr= 0x70000
    readBuf = FlashRead(chn, readAddr, readLen)
    
    MSG.Println("----------------------------")
    MSG.Println("FlashRead addr : 0x%06X ", readAddr)
        
    MSG.Println(ADDP.Array2Hexstr(readBuf))
    MSG.Println("----------------------------")
    local endTime = socket.gettime()
    MSG.Println("F_OTPWriteInitCode ... end, runtime : %.2f", endTime - startTime)
    return ret
end
function Erase_Flash()
    local ret = 0
    local chn = 1
    local readData = {}
    local writeData = {}
    local readLen = 0

    local startTime = socket.gettime()
    F_SPIControl()
    TIME.Delay(300)

    GPIO.SetGpioOutOnOff(chn, 4, ON)
    TIME.Delay(300)

    InitSPI()

    -- set die 0
    writeData = {0xF8}
    local dieID = SPI.Read(chn, writeData, 1)
    MSG.Println('1---read dieID 0xF8 : 0x%02X', dieID[1])
    writeData = {0xC2, 0x00}
    SPI.Write(chn, writeData)
    TIME.Delay(50)
    writeData = {0xF8}
    local dieID = SPI.Read(chn, writeData, 1)
    MSG.Println('2---read dieID 0xF8 : 0x%02X', dieID[1])
    -- software Reset
    writeData = {0x66}
    SPI.Write(chn, writeData)
    writeData = {0x99}
    SPI.Write(chn, writeData)

    -- 1: read Flash ID 0x9F
    writeData = {0x9F}
    readLen = 3
    local FlashID = SPI.Read(chn, writeData, readLen)
    MSG.Println('Flash ID : %s', ADDP.Array2Hexstr(FlashID))
    if FlashID[1] == 0 or FlashID[1] == 0xFF then
        MSG.Error('read FlashID NG !')
        return 1
    end

    -- 2 : read status
    local data_05 = SPI.Read(1, {0x05}, 1)
    local data_35 = SPI.Read(1, {0x35}, 1)
    local data_15 = SPI.Read(1, {0x15}, 1)
    MSG.Println('falsh status 05 : %s', ADDP.Array2Hexstr(data_05))
    MSG.Println('falsh status 35 : %s', ADDP.Array2Hexstr(data_35))
    MSG.Println('falsh status 15 : %s', ADDP.Array2Hexstr(data_15))
    TIME.Delay(5)

    -- 3 : erase
    MSG.Println('Erase ... start')
	local InitCodeAddr = 0x000000
    local offsetAddr = 0xC0000		--local InitCodeAddr = 0x000000
    while (offsetAddr < 0xF0000) do
		MSG.Println('----------------------------------------')
        local eraseAddr = InitCodeAddr + offsetAddr

        MSG.Println('CMD_BlockErase_64K, eraseAddr : 0x%06X', eraseAddr)
        BlockErase64K(chn, eraseAddr)

        MSG.Println("read status ")
        if waitFlashStatus(chn) ~= 0 then
            break
        end
        offsetAddr = offsetAddr + 0x10000
    end
    MSG.Println('Erase ... end')
    MSG.Println('----------------------------')
    local endTime = socket.gettime()
    MSG.Println('Erase ... end, runtime : %.2f', endTime - startTime)
    return ret
end

--InitCode Addr : 0x0000, 0x10000
function F_OTPReadInitCode()
    
    local ret = 0
    local chn = 1
    local readData = {}
    local writeData = {}
    local readLen = 0
    local InitCodeAddr = 0x000000
    
    MSG.Println("F_OTPReadInitCode ... start")
    local startTime = socket.gettime()
    F_SPIControl()
    --PWR.SetPwrOnOff(chn, POWER_TYPE_VDDIO, ON);
    TIME.Delay(300);
    
    GPIO.SetGpioOutOnOff(chn, 4, ON)
    TIME.Delay(300);

   -- local fileName = "MT9399_BOE_2560x1600_V12V8_20220825_0xAD97_28.bin"
   -- local fileName = "MT9399_BOE_2736x2084_0x58D2_20230406GBONEM1P.bin"     ---------------1 Pulse
	  local fileName = "MT9399_BOE_2736x2084_0x58D2_20230406GBOFF.bin"-------------切频率，切DBV,第二版DBV,GBOFF
     -- local fileName = "MT9399_BOE_2736x2084_0x5953_20230416.bin" 
	--local fileName = "MT9399_BOE_2736x2084_0x589D_2023021_20230307_0x5966_20230307_0x583A.bin"----第二版initial code
	--local fileName = "MT9399_BOE_2736x2084_0x589D_2023021_20230307_0x5966.bin"----第一版initial code  
   --  local fileName = "MT9399_BOE_2736x2084_0x589D_2023021_20230307_0x5966_0309_GBOFF.bin_"----第一版initial code ,gboff 
    local luaPath = GetLuaFolderName()
    local filePath = string.format("%sCSV/%s", luaPath, fileName);   --测试用
 

    MSG.Println("Read Binary File ...")
    local binData = ReadBinFile(filePath)
    local fileSize = #binData
    --local fileSize = GetFileSize(filePath)
    
    MSG.Println("--------------------------------")
    MSG.Println("fileSize : %d, 0x%X", fileSize, fileSize)
    --MSG.Println("CRCData : %s", ADDP.Array2Hexstr(CRCData))
    --MSG.Println(ADDP.Array2Hexstr(binData))
    MSG.Println("--------------------------------")
    --]]
    -- 0: spi init
    InitSPI()
 
    -- set die 0
    writeData = {0xF8}
    local dieID = SPI.Read(chn, writeData, 1)
    MSG.Println("1---read dieID 0xF8 : 0x%02X", dieID[1])
    writeData = {0xC2, 0x00}
    SPI.Write(chn, writeData)
    TIME.Delay(50)
    writeData = {0xF8}
    local dieID = SPI.Read(chn, writeData, 1)
    MSG.Println("2---read dieID 0xF8 : 0x%02X", dieID[1])
    -- software Reset
    writeData = {0x66}
    SPI.Write(chn, writeData)
    writeData = {0x99}
    SPI.Write(chn, writeData)
 
    -- 1: read Flash ID 0x9F
    writeData = {0x9F}
    readLen = 3
    local FlashID = SPI.Read(chn, writeData, readLen)
    MSG.Println("Flash ID : %s", ADDP.Array2Hexstr(FlashID))
    if FlashID[1] == 0 or FlashID[1] == 0xFF then
        MSG.Error("read FlashID NG !")
        return 1
    end
    
    -- 2 : read status
    local data_05 = SPI.Read(1, {0x05}, 1);
    local data_35 = SPI.Read(1, {0x35}, 1);
    local data_15 = SPI.Read(1, {0x15}, 1);
    MSG.Println("falsh status 05 : %s", ADDP.Array2Hexstr(data_05))
    MSG.Println("falsh status 35 : %s", ADDP.Array2Hexstr(data_35))
    MSG.Println("falsh status 15 : %s", ADDP.Array2Hexstr(data_15))
    TIME.Delay(5)
    
    -- 5: read data
    MSG.Println("read Data-----------------3")
    -- write enable1
    local readAddr = InitCodeAddr
    readLen = 0x400
    local readBuf = FlashRead(chn, readAddr, readLen)
    
    MSG.Println("----------------------------")
    MSG.Println("FlashRead addr : 0x%06X ", readAddr)
        
    MSG.Println(ADDP.Array2Hexstr(readBuf))
    MSG.Println("----------------------------")
    
    -- write enable2
    readLen = 0x400
    readAddr = InitCodeAddr + fileSize - 0x400
    readAddr= 0x70000
    readBuf = FlashRead(chn, readAddr, readLen)
    
    MSG.Println("----------------------------")
    MSG.Println("FlashRead addr : 0x%06X ", readAddr)
        
    MSG.Println(ADDP.Array2Hexstr(readBuf))
    MSG.Println("----------------------------")
    local endTime = socket.gettime()
    MSG.Println("F_OTPReadInitCode ... end, runtime : %.2f", endTime - startTime)
    return ret
end

--Demura LUT Addr : 0xC0000
function F_OTPWriteDemura()

    local ret = "OK" 
    local chn = 1
    local readData = {}
    local writeData = {}
    local readLen = 0
    
    MSG.Println("F_OTPWriteDemura ... start")
    F_SPIControl()
    TIME.Delay(100);
    GPIO.SetGpioOutOnOff(chn, 4, ON)
    
    local DemuraAddr = 0x100000
	--local fileName = "Silicon_OffsetGain.bin"--"White_2x2_test.bin"
    --local luaPath = GetLuaFolderName()
    --local filePath = string.format("%sCSV/%s", luaPath, fileName);   --测试用
    local filePath = "//opt//program//demura//Demura_File_Pg_1.bin"   --用于产线bin档路径

    MSG.Println("Read DeMura Binary File ...")
    --local binData = ReadBinaryFile(filePath)
	local binData = ReadBinFile(filePath)
    local fileSize = #binData
    --local fileSize = GetFileSize(filePath)
    local CRCData = GetFileCRCData(filePath)
    MSG.Println("--------------------------------")
    MSG.Println("DeMura bin file Size : %d, 0x%X", fileSize, fileSize)
    MSG.Println("DeMura file CRC Data : %s", ADDP.Array2Hexstr(CRCData))
    --MSG.Println(ADDP.Array2Hexstr(binData))
    MSG.Println("--------------------------------")
    
    -- 0: spi init
    InitSPI()
	TIME.Delay(100);
	
	--------------------------------------------------------------------------
    -- set die 0
    writeData = {0xF8}
    local dieID = SPI.Read(chn, writeData, 1)
    MSG.Println("1---read dieID 0xF8 : 0x%02X", dieID[1])
    writeData = {0xC2, 0x00}
    SPI.Write(chn, writeData)
    TIME.Delay(50)
    writeData = {0xF8}
    local dieID = SPI.Read(chn, writeData, 1)
    MSG.Println("2---read dieID 0xF8 : 0x%02X", dieID[1])
    -- software Reset
    writeData = {0x66}
    SPI.Write(chn, writeData)
    writeData = {0x99}
    SPI.Write(chn, writeData)

    -- 1: read Flash ID 0x9F
    writeData = {0x9F}
    readLen = 3
    local FlashID = SPI.Read(chn, writeData, readLen)
    MSG.Println("Flash ID : %s", ADDP.Array2Hexstr(FlashID))
    if FlashID[1] == 0 or FlashID[1] == 0xFF then
		MSG.Error("read FlashID NG !")
		return 1
    end
    
    -- 2 : read status
    local data_05 = SPI.Read(1, {0x05}, 1);
    local data_35 = SPI.Read(1, {0x35}, 1);
    local data_15 = SPI.Read(1, {0x15}, 1);
    --MSG.Println("falsh status 05 : %s", ADDP.Array2Hexstr(data_05))
    --MSG.Println("falsh status 35 : %s", ADDP.Array2Hexstr(data_35))
    --MSG.Println("falsh status 15 : %s", ADDP.Array2Hexstr(data_15))
    TIME.Delay(5)
	
    -- 4 : write to flash
	MSG.Println("spiFlashWriteByBIN ... start")
    PageProgram(chn, DemuraAddr, binData)
	MSG.Println("spiFlashWriteByBIN ... ONgoing")
	-----------------------------------
    -- power ON / OFF
    TIME.Delay(200)
	F_POWER_OFF()
    TIME.Delay(500)
    F_POWER_ON()
    TIME.Delay(500)
	SYS.SwitchRGB(gChannel, 128, 128, 128)
	--SYS.SwitchPtn(gChannel, "W128.a1");
    TIME.Delay(200)
 

	--5: read data
    MSG.Println("read Data-----------------3")
    -- write enable1
	local DemuraTCONCrc = ReadDemuraCRC()
	MSG.Println("Demura Bin Crc: %s", ADDP.Array2Hexstr(CRCData))
	MSG.Println("Demura TCON Crc: %s", ADDP.Array2Hexstr(DemuraTCONCrc))
    local crcret = ADDP.CompareTb(CRCData, DemuraTCONCrc, 4)

    if crcret ~= 0 then
        MSG.Error("Check Demura CRC NG!")
		ret = "NG"
		SYS.SwitchRGB(gChannel, 128, 0, 0)
    else
        MSG.Println("Check Demura CRC OK!")
    end

   WRITE_GAMMAORDEMURACOUNT(gChannel,2)
   return ret,res;
end

function F_OTPWriteDeBurnInLUT()
    
    local ret = 0
    local chn = 1
    local readData = {}
    local writeData = {}
    local readLen = 0
    
    MSG.Println("F_OTPWriteDeBurnInLUT ... start")
   
    F_SPIControl()
    TIME.Delay(100);
    
    GPIO.SetGpioOutOnOff(chn, 4, ON)
    --]]
    
    -- 0: spi init
    InitSPI()
    
    local fileName = "burn in.bin" -- 0x390000
    local DeBurnInLUTAddr = 0x450000
    local luaPath = GetLuaFolderName()
    local filePath = string.format("%sCSV/%s", luaPath, fileName);
    

    MSG.Println("Read Binary File ...")
    local fileSize = GetFileSize(filePath)
    MSG.Println("--------------------------------")
    MSG.Println("fileSize : %d, 0x%X", fileSize, fileSize)
    --MSG.Println(ADDP.Array2Hexstr(binData))
    MSG.Println("--------------------------------")
    

    
    -- 1: read Flash ID 0x9F
    writeData = {0x9F}
    readLen = 3
    local FlashID = SPI.Read(chn, writeData, readLen)
    MSG.Println("Flash ID : %s", ADDP.Array2Hexstr(FlashID))
    if FlashID[1] == 0 or FlashID[1] == 0xFF then
        MSG.Error("read FlashID NG !")
        return 1
    end
    
    -- read status
    local data_05 = SPI.Read(1, {0x05}, 2);
    local data_35 = SPI.Read(1, {0x35}, 2);
    MSG.Println("falsh status 05 : %s", ADDP.Array2Hexstr(data_05))
    MSG.Println("falsh status 35 : %s", ADDP.Array2Hexstr(data_35))
    TIME.Delay(5)
    

    -- erase
    MSG.Println("Erase ... start")
    local offsetAddr = 0x00000
    while(offsetAddr < fileSize ) do
        local eraseAddr = DeBurnInLUTAddr + offsetAddr
        MSG.Println("CMD_BlockErase_64K, eraseAddr : 0x%06X", eraseAddr)
        BlockErase64K(chn, eraseAddr)
        offsetAddr = offsetAddr + 0x10000
        
        --MSG.Println("read status ")
        for i = 1, 100 do
            --MSG.Println("----- ".. i)
            data_05 = SPI.Read(1, {0x05}, 2);
            data_35 = SPI.Read(1, {0x35}, 2);
            --MSG.Println("falsh status 05 : %s", ADDP.Array2Hexstr(data_05))
            --MSG.Println("falsh status 35 : %s", ADDP.Array2Hexstr(data_35))
            if data_05[1] & 0x01 == 0x00 then
                MSG.Println("falsh status 05 : %s", ADDP.Array2Hexstr(data_05))
                --MSG.Println("falsh status 35 : %s", ADDP.Array2Hexstr(data_35))
                break
            end
            
            TIME.Delay(10)
        end
    end
    MSG.Println("Erase ... end")
    MSG.Println("QspiFlashWriteByBIN ... start")
    -- write to flash
    local writeCmd = 0x32
    local addrLen = 3
    local addr = DeBurnInLUTAddr
    local binPos = 1
    local writeLen = fileSize
    local writeUnit = 256
    SPI.QspiFlashWriteByBIN(chn, filePath, writeCmd, addrLen, addr, binPos, writeLen, writeUnit)
    MSG.Println("QspiFlashWriteByBIN ... end")
    TIME.Delay(50)

    -- read Gamma
    MSG.Println("read Gamma-----------------3")
    -- write enable
    writeData = {0x06}
    SPI.Write(chn, writeData)
    TIME.Delay(5)
    
    fileSize = fileSize
    local cmd = 0x6B
    readLen = 0x400
    local buf = SPI.FastReadQuadOutput(chn, cmd, DeBurnInLUTAddr, addrLen, readLen)
    MSG.Println("----------------------------")
    MSG.Println("FastReadQuad 6B addr : 0x%06X ", DeBurnInLUTAddr)
        
    MSG.Println(ADDP.Array2Hexstr(buf))
    MSG.Println("----------------------------")
    
    -- write enable
    writeData = {0x06}
    SPI.Write(chn, writeData)
    TIME.Delay(5)
    readLen = 0x400
    buf = {}
    addr = DeBurnInLUTAddr + fileSize - 0x400
    buf = SPI.FastReadQuadOutput(chn, cmd, addr, addrLen, readLen)
    MSG.Println("----------------------------")
    MSG.Println("FastReadQuad 6B addr : 0x%06X ", addr)
        
    MSG.Println(ADDP.Array2Hexstr(buf))
    MSG.Println("----------------------------")
    
    return ret, CRCData
end


function F_OTPWriteDBICode()
    
    local ret = 0
    local chn = 1
    local readData = {}
    local writeData = {}
    local readLen = 0
    
    MSG.Println("F_OTPWriteDBICode ... start")
    local startTime = socket.gettime()
    F_SPIControl()
    --PWR.SetPwrOnOff(chn, POWER_TYPE_VDDIO, ON);
    TIME.Delay(300);
    
    GPIO.SetGpioOutOnOff(chn, 4, ON)
    TIME.Delay(300);
	gLogLevel = 3-- 3 : open (ERROR,WARNING) Log
    local fileName = "BFA002_intialBIN.bin"
--	local fileName = "BOE1505_2560X1600_flash27G_20211216_509B_shangqi.bin"
--    local fileName = "BOE1505_2560X1600_flash27G_20211216_509B.bin"
--	local fileName = "BOE1505_2560X1600_flash27G_20211110_0x2CE2.bin"
    --local fileName = "RRRRRRRRR.bin"
    local InitCodeAddr = 0x450000
    local luaPath = GetLuaFolderName()
    local filePath = string.format("%sCSV/%s", luaPath, fileName);   --测试用


    MSG.Println("Read Binary File ...")
    local binData = ReadBinFile(filePath)
    local fileSize = #binData
    --local fileSize = GetFileSize(filePath)
    
    MSG.Println("--------------------------------")
    MSG.Println("fileSize : %d, 0x%X", fileSize, fileSize)
    --MSG.Println("CRCData : %s", ADDP.Array2Hexstr(CRCData))
    --MSG.Println(ADDP.Array2Hexstr(binData))
    MSG.Println("--------------------------------")
    --]]
    -- 0: spi init
    InitSPI()
    
    -- set die 0
    writeData = {0xF8}
    local dieID = SPI.Read(chn, writeData, 1)
    MSG.Println("1---read dieID 0xF8 : 0x%02X", dieID[1])
    writeData = {0xC2, 0x00}
    SPI.Write(chn, writeData)
    TIME.Delay(50)
    writeData = {0xF8}
    local dieID = SPI.Read(chn, writeData, 1)
    MSG.Println("2---read dieID 0xF8 : 0x%02X", dieID[1])
    -- software Reset
    writeData = {0x66}
    SPI.Write(chn, writeData)
    writeData = {0x99}
    SPI.Write(chn, writeData)

    -- 1: read Flash ID 0x9F
    writeData = {0x9F}
    readLen = 3
    local FlashID = SPI.Read(chn, writeData, readLen)
    MSG.Println("Flash ID : %s", ADDP.Array2Hexstr(FlashID))
    if FlashID[1] == 0 or FlashID[1] == 0xFF then
        MSG.Error("read FlashID NG !")
        return 1
    end
    
    -- 2 : read status
    local data_05 = SPI.Read(1, {0x05}, 1);
    local data_35 = SPI.Read(1, {0x35}, 1);
    local data_15 = SPI.Read(1, {0x15}, 1);
    MSG.Println("falsh status 05 : %s", ADDP.Array2Hexstr(data_05))
    MSG.Println("falsh status 35 : %s", ADDP.Array2Hexstr(data_35))
    MSG.Println("falsh status 15 : %s", ADDP.Array2Hexstr(data_15))
    TIME.Delay(5)
	
    --[[MSG.Println("read Data-----------------1")
    -- write enable1
    local readAddr = InitCodeAddr
    readLen = 0x400
    local readBuf = FlashRead(chn, readAddr, readLen)
    
    MSG.Println("----------------------------")
    MSG.Println("FlashRead addr : 0x%06X ", readAddr)
        
    MSG.Println(ADDP.Array2Hexstr(readBuf))
    MSG.Println("----------------------------")--]]

    -- 3 : erase
    MSG.Println("Erase ... start")
    local offsetAddr = 0x00000
    while(offsetAddr < fileSize) do
        local eraseAddr = InitCodeAddr + offsetAddr
  
        MSG.Println("CMD_BlockErase_64K, eraseAddr : 0x%06X", eraseAddr)
        BlockErase64K(chn, eraseAddr)
        
        --MSG.Println("read status ")
        if waitFlashStatus(chn) ~= 0 then
            break
        end
        offsetAddr = offsetAddr + 0x10000
    end
    MSG.Println("Erase ... end")
	
	--[[MSG.Println("read Data-----------------2")
    -- write enable1
    local readAddr = InitCodeAddr
    readLen = 0x400
    local readBuf = FlashRead(chn, readAddr, readLen)
    
    MSG.Println("----------------------------")
    MSG.Println("FlashRead addr : 0x%06X ", readAddr)
        
    MSG.Println(ADDP.Array2Hexstr(readBuf))
    MSG.Println("----------------------------")--]]

    MSG.Println("spiFlashWriteByBIN ... start")
    -- 4 : write to flash
    PageProgram(chn, InitCodeAddr, binData)
 
    -- 5: read data
    MSG.Println("read Data-----------------3")
    -- write enable1
    local readAddr = InitCodeAddr
    readLen = 0x400
    local readBuf = FlashRead(chn, readAddr, readLen)
    
    MSG.Println("----------------------------")
    MSG.Println("FlashRead addr : 0x%06X ", readAddr)
        
    MSG.Println(ADDP.Array2Hexstr(readBuf))
    MSG.Println("----------------------------")
    
    -- write enable2
    readLen = 0x400
    readAddr = InitCodeAddr + fileSize - 0x400
    readAddr= 0x70000
    readBuf = FlashRead(chn, readAddr, readLen)
    
    MSG.Println("----------------------------")
    MSG.Println("FlashRead addr : 0x%06X ", readAddr)
	gLogLevel = 1 -- 1 : open all Log (ERROR,WARNING,INFO,DEBUG)
    MSG.Println(ADDP.Array2Hexstr(readBuf))
    MSG.Println("----------------------------")
    local endTime = socket.gettime()
    MSG.Println("F_OTPWriteDBICode ... end, runtime : %.2f", endTime - startTime)
    return ret
end 




function F_EraseDBICode()
    
    local ret = 0
    local chn = 1
    local readData = {}
    local writeData = {}
    local readLen = 0
    
    MSG.Println("F_EraseDBICode ... start")
    local startTime = socket.gettime()
    F_SPIControl()
    --PWR.SetPwrOnOff(chn, POWER_TYPE_VDDIO, ON);
    TIME.Delay(300);
    
    GPIO.SetGpioOutOnOff(chn, 4, ON)
    TIME.Delay(300);

    local fileName = "BFA002_intialBIN.bin"
--	local fileName = "BOE1505_2560X1600_flash27G_20211216_509B_shangqi.bin"
--    local fileName = "BOE1505_2560X1600_flash27G_20211216_509B.bin"
--	local fileName = "BOE1505_2560X1600_flash27G_20211110_0x2CE2.bin"
    --local fileName = "RRRRRRRRR.bin"
    local InitCodeAddr = 0x450000
    local luaPath = GetLuaFolderName()
    local filePath = string.format("%sCSV/%s", luaPath, fileName);   --测试用


    MSG.Println("Read Binary File ...")
    local binData = ReadBinFile(filePath)
    local fileSize = #binData
    --local fileSize = GetFileSize(filePath)
    
    MSG.Println("--------------------------------")
  --  MSG.Println("fileSize : %d, 0x%X", fileSize, fileSize)
    --MSG.Println("CRCData : %s", ADDP.Array2Hexstr(CRCData))
    --MSG.Println(ADDP.Array2Hexstr(binData))
    MSG.Println("--------------------------------")
    --]]
    -- 0: spi init
    InitSPI()
    
    -- set die 0
    writeData = {0xF8}
    local dieID = SPI.Read(chn, writeData, 1)
    MSG.Println("1---read dieID 0xF8 : 0x%02X", dieID[1])
    writeData = {0xC2, 0x00}
    SPI.Write(chn, writeData)
    TIME.Delay(50)
    writeData = {0xF8}
    local dieID = SPI.Read(chn, writeData, 1)
    MSG.Println("2---read dieID 0xF8 : 0x%02X", dieID[1])
    -- software Reset
    writeData = {0x66}
    SPI.Write(chn, writeData)
    writeData = {0x99}
    SPI.Write(chn, writeData)

    -- 1: read Flash ID 0x9F
    writeData = {0x9F}
    readLen = 3
    local FlashID = SPI.Read(chn, writeData, readLen)
    MSG.Println("Flash ID : %s", ADDP.Array2Hexstr(FlashID))
    if FlashID[1] == 0 or FlashID[1] == 0xFF then
        MSG.Error("read FlashID NG !")
        return 1
    end
    
    -- 2 : read status
    local data_05 = SPI.Read(1, {0x05}, 1);
    local data_35 = SPI.Read(1, {0x35}, 1);
    local data_15 = SPI.Read(1, {0x15}, 1);
    MSG.Println("falsh status 05 : %s", ADDP.Array2Hexstr(data_05))
    MSG.Println("falsh status 35 : %s", ADDP.Array2Hexstr(data_35))
    MSG.Println("falsh status 15 : %s", ADDP.Array2Hexstr(data_15))
    TIME.Delay(5)
	


    gLogLevel = 2 -- 2 : open (ERROR,WARNING,INFO) Log
    -- 3 : erase
    MSG.Println("Erase ... start")
    local offsetAddr = 0x00000
    while(offsetAddr < fileSize) do
        local eraseAddr = InitCodeAddr + offsetAddr
  
        MSG.Println("CMD_BlockErase_64K, eraseAddr : 0x%06X", eraseAddr)
        BlockErase64K(chn, eraseAddr)
        
        --MSG.Println("read status ")
        if waitFlashStatus(chn) ~= 0 then
            break
        end
        offsetAddr = offsetAddr + 0x10000
    end
    MSG.Println("Erase ... end")
	

    local endTime = socket.gettime()
    MSG.Println("F_EraseDBICode ... end, runtime : %.2f", endTime - startTime)
    return ret
end 


function Tranbin2REG_line(color_index,gray_value,bin_table)-- 列 16*102行//(34*3)
local gamma_reg_table = {};
local RGB_Index ={};
local gray_index = {};

	table.insert(gamma_reg_table,color_index)
	table.insert(gamma_reg_table,gray_value)
	
   for m = 3, #bin_table,3 do 
	
	 if m == 15 then
		table.insert(gamma_reg_table,((bin_table[m] << 4 )& 0xFF0)+((bin_table[m-1]>> 4) & 0x0F));

		else
		table.insert(gamma_reg_table,((bin_table[m] << 4 )& 0xFF0)+((bin_table[m-1]>> 4) & 0x0F));
		table.insert(gamma_reg_table,(bin_table[m+1] & 0xFF)+((bin_table[m+2]<< 8) & 0xF00));
		end

   end
   
    ------------add vdata------------------
	local VGMP_V = 6.6;
	local VGSP_V = 0.25;
	for k = 3,#gamma_reg_table do
	table.insert(gamma_reg_table,VGMP_V-(VGMP_V-VGSP_V)/4096*gamma_reg_table[k])
	end
	
	---------------------------------------------------------------
	--[[
	  ----存16进制
   for k = 3,11 do
   gamma_reg_table[k] = string.format('%x', gamma_reg_table[k])
   end
   --]]
   

    return gamma_reg_table;
end

function F_OTPReadGammaHEX_GRAY()
   
    local ret = 0
    local chn = 1
    local readData = {}
    local writeData = {}
    local readLen = 0
	local FolderName = GetLuaFolderName()
	local band_num = 34;
	local filename =
        string.format('Gamma_READ_PANEL_%s.CSV',  os.date('%Y%m%d%H%M%S'))
 local gray_index =  {255, 247, 239, 231, 223, 215, 207, 199, 191, 183, 175, 159, 143, 127, 111, 95, 79, 63, 55, 47, 39, 31, 23, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1, 0}

        local tContent_final = {
        {
            'Color',
            'Gray'
   
        }
    }
	for i = 18,10,-1 do
	table.insert(tContent_final[1],"REG_band"..i)
	end
	for i = 18,10,-1 do
	table.insert(tContent_final[1],"Vdata_band"..i)
	end
	
	
	
    MSG.Println("F_OTPReadGamma ... start")
    F_SPIControl()
    TIME.Delay(100);
    
   -- GPIO.SetGpioOutOnOff(chn, 4, ON)--NO NEED
    
    local gammaAddr = 0x20000
    
    -- 0: spi init
    InitSPI()
     TIME.Delay(100);
    -- 1: read Flash ID 0x9F
    writeData = {0x9F}
    readLen = 3
    local FlashID = SPI.Read(chn, writeData, readLen)
    --MSG.Println("Flash ID : %s", ADDP.Array2Hexstr(FlashID))
    if FlashID[1] == 0 or FlashID[1] == 0xFF then
        MSG.Error("read FlashID NG !")
        return 1
    end
    
    -- 2 : read status
    local data_05 = SPI.Read(1, {0x05}, 2);
    local data_35 = SPI.Read(1, {0x35}, 2);
   -- MSG.Println("falsh status 05 : %s", ADDP.Array2Hexstr(data_05))
   -- MSG.Println("falsh status 35 : %s", ADDP.Array2Hexstr(data_35))
    TIME.Delay(5)
   --
    -- 3 : read Gamma
    -- write enable
    writeData = {0x06}
    SPI.Write(chn, writeData)
    TIME.Delay(5)
    local tContent={}
	local offset = {0,4480,8960}--4480*16*35*8--index for R G B
	local color_index = {"R","G","B"}
	for m = 1,3 do
	
    for i = 1, band_num do
	    local readLen = 0x10
        local addr = gammaAddr + offset[m]+(i - 1) * readLen
        local buf = {}
        local cmd = 0x6B
        local addrLen = 3
    
		--MSG.Println("read Data-----------------R")

		local readBuf = FlashRead(chn, addr, readLen)
		local readBuf_hex ={};

		readBuf_hex = Tranbin2REG_line(color_index[m],gray_index[35-i],readBuf)

		table.insert(tContent,readBuf_hex)
    end
    end
-------------------------------------------------TAPPOINT_REG_IN_tContent-------------------------------------------------------------
------------------------------------------------CAL ALL THE GRAY-----------------------------------------------------------
	local gray_all_list ={};--for tContent_gray gray_index for tContent
	local tContent_gray = {};
	local low_gray =1;
	local hige_gray =3;
	local VGMP_V = 6.6;
	local VGSP_V = 0.25;
	for i = 0,255 do
	table.insert(gray_all_list,i);
	end
	
	for j = 1,256 do
	tContent_gray[j] = {}
	tContent_gray[j+256] = {}
	tContent_gray[j+512] = {}
	MSG.Println("Cal the gray of = "..gray_all_list[j])
		for k = band_num,1,-1 do
		
		   if gray_index[k] == gray_all_list[j] then
		   tContent_gray[j] = tContent[35-k];
		   tContent_gray[j+256] = tContent[35-k+34];
		   tContent_gray[j+512] = tContent[35-k+68];
		    break
		   elseif gray_index[k]>gray_all_list[j] then
		   hige_gray = gray_index[k]
		   low_gray = gray_index[k+1]

		   
		   for m = 1,#tContent[k] do

			 if m == 1 then
			    tContent_gray[j][m] =  tContent[k][m]
				tContent_gray[j+256][m] =  tContent[k+34][m]
				tContent_gray[j+512][m] =  tContent[k+68][m]
		
			 elseif m ==2 then
				tContent_gray[j][m] = j-1;
				tContent_gray[j+256][m] = j-1;
				tContent_gray[j+512][m] = j-1;
				
			  elseif m <= 11 then	
				tContent_gray[j][m] = math.ceil(tContent[35-k-1][m] +(tContent[35-k][m] -  tContent[35-k-1][m]) * (gray_all_list[j] - low_gray) /(hige_gray - low_gray) +0.5)
				tContent_gray[j+256][m] = math.ceil(tContent[35-k-1+34][m] +(tContent[35-k+34][m] -  tContent[35-k-1+34][m]) * (gray_all_list[j] - low_gray) /(hige_gray - low_gray) +0.5)
				tContent_gray[j+512][m] = math.ceil(tContent[35-k-1+68][m] +(tContent[35-k+68][m] -  tContent[35-k-1+68][m]) * (gray_all_list[j] - low_gray) /(hige_gray - low_gray) +0.5)
			 else-- cal the data voltage
				tContent_gray[j][m] = VGMP_V-(VGMP_V-VGSP_V)/4096*tContent_gray[j][m-9]
				tContent_gray[j+256][m] =VGMP_V-(VGMP_V-VGSP_V)/4096*tContent_gray[j+256][m-9]
				tContent_gray[j+512][m] =VGMP_V-(VGMP_V-VGSP_V)/4096*tContent_gray[j+512][m-9]
				end
			 
			 end
		  
		   break
		   end
		   
		end
		
	end

	for j = 1,#tContent_gray do

	table.insert(tContent_final,tContent_gray[j])
	--table.insert(tContent_final,tContent_gray[j+256])
	--table.insert(tContent_final,tContent_gray[j+512])
	
	end

    MSG.Println("F_OTPReadGamma ... end")
    WriteCsv(FolderName .. 'CSV//' .. filename, tContent_final)
    F_SaveCSV2PC(filename)
	MSG.Debug(string.format('GAMMA READ  Complete'))
    return ret
    
end
